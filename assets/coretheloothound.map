{"version":3,"sources":["vendor/ember-cli/app-prefix.js","coretheloothound/adapters/application.js","coretheloothound/app.js","coretheloothound/components/character-select.js","coretheloothound/components/date-time.js","coretheloothound/components/donut-graph.js","coretheloothound/components/guild-select.js","coretheloothound/components/lf-overlay.js","coretheloothound/components/liquid-bind-c.js","coretheloothound/components/liquid-measured.js","coretheloothound/components/liquid-modal.js","coretheloothound/components/liquid-spacer.js","coretheloothound/components/lm-container.js","coretheloothound/components/raid-group.js","coretheloothound/components/raid-permission.js","coretheloothound/components/raid-permissions.js","coretheloothound/components/raid-signup.js","coretheloothound/controllers/account.js","coretheloothound/controllers/application.js","coretheloothound/controllers/auth.js","coretheloothound/controllers/character.js","coretheloothound/controllers/characters/index.js","coretheloothound/controllers/raid.js","coretheloothound/controllers/raid/index.js","coretheloothound/controllers/raids/index.js","coretheloothound/controllers/raids/new.js","coretheloothound/controllers/role.js","coretheloothound/controllers/signup.js","coretheloothound/helpers/character-class.js","coretheloothound/helpers/character-faction.js","coretheloothound/helpers/character-race.js","coretheloothound/helpers/liquid-bind.js","coretheloothound/helpers/liquid-if.js","coretheloothound/helpers/liquid-measure.js","coretheloothound/helpers/liquid-outlet.js","coretheloothound/helpers/liquid-unless.js","coretheloothound/helpers/liquid-with.js","coretheloothound/helpers/with-apply.js","coretheloothound/initializers/app-version.js","coretheloothound/initializers/export-application-global.js","coretheloothound/initializers/link-view.js","coretheloothound/initializers/liquid-fire.js","coretheloothound/initializers/storage.js","coretheloothound/mixins/after-render.js","coretheloothound/models/account.js","coretheloothound/models/character.js","coretheloothound/models/guild.js","coretheloothound/models/permission.js","coretheloothound/models/permissioned.js","coretheloothound/models/raid.js","coretheloothound/models/role.js","coretheloothound/models/signup.js","coretheloothound/models/storage.js","coretheloothound/router.js","coretheloothound/routes/apikey.js","coretheloothound/routes/application.js","coretheloothound/routes/characters/index.js","coretheloothound/routes/raid.js","coretheloothound/routes/raid/index.js","coretheloothound/routes/raids/index.js","coretheloothound/serializers/signup.js","coretheloothound/templates/account.js","coretheloothound/templates/apikey.js","coretheloothound/templates/application.js","coretheloothound/templates/auth.js","coretheloothound/templates/characters.js","coretheloothound/templates/characters/index.js","coretheloothound/templates/components/character-select.js","coretheloothound/templates/components/date-time.js","coretheloothound/templates/components/donut-graph.js","coretheloothound/templates/components/guild-select.js","coretheloothound/templates/components/liquid-bind-c.js","coretheloothound/templates/components/liquid-measured.js","coretheloothound/templates/components/liquid-modal.js","coretheloothound/templates/components/liquid-spacer.js","coretheloothound/templates/components/raid-group.js","coretheloothound/templates/components/raid-permission.js","coretheloothound/templates/components/raid-permissions.js","coretheloothound/templates/components/raid-signup.js","coretheloothound/templates/index.js","coretheloothound/templates/liquid-with-self.js","coretheloothound/templates/liquid-with.js","coretheloothound/templates/raid.js","coretheloothound/templates/raid/edit.js","coretheloothound/templates/raid/index.js","coretheloothound/templates/raids.js","coretheloothound/templates/raids/index.js","coretheloothound/templates/raids/new.js","coretheloothound/templates/user.js","coretheloothound/tests/adapters/application.jshint.js","coretheloothound/tests/app.jshint.js","coretheloothound/tests/components/character-select.jshint.js","coretheloothound/tests/components/date-time.jshint.js","coretheloothound/tests/components/donut-graph.jshint.js","coretheloothound/tests/components/guild-select.jshint.js","coretheloothound/tests/components/raid-group.jshint.js","coretheloothound/tests/components/raid-permission.jshint.js","coretheloothound/tests/components/raid-permissions.jshint.js","coretheloothound/tests/components/raid-signup.jshint.js","coretheloothound/tests/controllers/account.jshint.js","coretheloothound/tests/controllers/application.jshint.js","coretheloothound/tests/controllers/auth.jshint.js","coretheloothound/tests/controllers/character.jshint.js","coretheloothound/tests/controllers/characters/index.jshint.js","coretheloothound/tests/controllers/raid.jshint.js","coretheloothound/tests/controllers/raid/index.jshint.js","coretheloothound/tests/controllers/raids/index.jshint.js","coretheloothound/tests/controllers/raids/new.jshint.js","coretheloothound/tests/controllers/role.jshint.js","coretheloothound/tests/controllers/signup.jshint.js","coretheloothound/tests/helpers/character-class.jshint.js","coretheloothound/tests/helpers/character-faction.jshint.js","coretheloothound/tests/helpers/character-race.jshint.js","coretheloothound/tests/helpers/resolver.js","coretheloothound/tests/helpers/resolver.jshint.js","coretheloothound/tests/helpers/start-app.js","coretheloothound/tests/helpers/start-app.jshint.js","coretheloothound/tests/initializers/link-view.jshint.js","coretheloothound/tests/initializers/storage.jshint.js","coretheloothound/tests/mixins/after-render.jshint.js","coretheloothound/tests/models/account.jshint.js","coretheloothound/tests/models/character.jshint.js","coretheloothound/tests/models/guild.jshint.js","coretheloothound/tests/models/permission.jshint.js","coretheloothound/tests/models/permissioned.jshint.js","coretheloothound/tests/models/raid.jshint.js","coretheloothound/tests/models/role.jshint.js","coretheloothound/tests/models/signup.jshint.js","coretheloothound/tests/models/storage.jshint.js","coretheloothound/tests/router.jshint.js","coretheloothound/tests/routes/apikey.jshint.js","coretheloothound/tests/routes/application.jshint.js","coretheloothound/tests/routes/characters/index.jshint.js","coretheloothound/tests/routes/raid.jshint.js","coretheloothound/tests/routes/raid/index.jshint.js","coretheloothound/tests/routes/raids/index.jshint.js","coretheloothound/tests/serializers/signup.jshint.js","coretheloothound/tests/test-helper.js","coretheloothound/tests/test-helper.jshint.js","coretheloothound/tests/transitions.jshint.js","coretheloothound/tests/unit/adapters/application-test.js","coretheloothound/tests/unit/adapters/application-test.jshint.js","coretheloothound/tests/unit/components/character-select-test.js","coretheloothound/tests/unit/components/character-select-test.jshint.js","coretheloothound/tests/unit/components/date-time-test.js","coretheloothound/tests/unit/components/date-time-test.jshint.js","coretheloothound/tests/unit/components/donut-graph-test.js","coretheloothound/tests/unit/components/donut-graph-test.jshint.js","coretheloothound/tests/unit/components/guild-select-test.js","coretheloothound/tests/unit/components/guild-select-test.jshint.js","coretheloothound/tests/unit/components/raid-group-test.js","coretheloothound/tests/unit/components/raid-group-test.jshint.js","coretheloothound/tests/unit/components/raid-permission-test.js","coretheloothound/tests/unit/components/raid-permission-test.jshint.js","coretheloothound/tests/unit/components/raid-permissions-test.js","coretheloothound/tests/unit/components/raid-permissions-test.jshint.js","coretheloothound/tests/unit/components/raid-signup-test.js","coretheloothound/tests/unit/components/raid-signup-test.jshint.js","coretheloothound/tests/unit/controllers/account-test.js","coretheloothound/tests/unit/controllers/account-test.jshint.js","coretheloothound/tests/unit/controllers/application-test.js","coretheloothound/tests/unit/controllers/application-test.jshint.js","coretheloothound/tests/unit/controllers/auth-test.js","coretheloothound/tests/unit/controllers/auth-test.jshint.js","coretheloothound/tests/unit/controllers/character-test.js","coretheloothound/tests/unit/controllers/character-test.jshint.js","coretheloothound/tests/unit/controllers/characters/index-test.js","coretheloothound/tests/unit/controllers/characters/index-test.jshint.js","coretheloothound/tests/unit/controllers/raids/index-test.js","coretheloothound/tests/unit/controllers/raids/index-test.jshint.js","coretheloothound/tests/unit/controllers/raids/new-test.js","coretheloothound/tests/unit/controllers/raids/new-test.jshint.js","coretheloothound/tests/unit/controllers/role-test.js","coretheloothound/tests/unit/controllers/role-test.jshint.js","coretheloothound/tests/unit/controllers/signup-test.js","coretheloothound/tests/unit/controllers/signup-test.jshint.js","coretheloothound/tests/unit/helpers/character-class-test.js","coretheloothound/tests/unit/helpers/character-class-test.jshint.js","coretheloothound/tests/unit/helpers/character-faction-test.js","coretheloothound/tests/unit/helpers/character-faction-test.jshint.js","coretheloothound/tests/unit/helpers/character-race-test.js","coretheloothound/tests/unit/helpers/character-race-test.jshint.js","coretheloothound/tests/unit/initializers/link-view-test.js","coretheloothound/tests/unit/initializers/link-view-test.jshint.js","coretheloothound/tests/unit/initializers/storage-test.js","coretheloothound/tests/unit/initializers/storage-test.jshint.js","coretheloothound/tests/unit/mixins/after-render-test.js","coretheloothound/tests/unit/mixins/after-render-test.jshint.js","coretheloothound/tests/unit/models/account-test.js","coretheloothound/tests/unit/models/account-test.jshint.js","coretheloothound/tests/unit/models/character-test.js","coretheloothound/tests/unit/models/character-test.jshint.js","coretheloothound/tests/unit/models/guild-test.js","coretheloothound/tests/unit/models/guild-test.jshint.js","coretheloothound/tests/unit/models/permission-test.js","coretheloothound/tests/unit/models/permission-test.jshint.js","coretheloothound/tests/unit/models/permissioned-test.js","coretheloothound/tests/unit/models/permissioned-test.jshint.js","coretheloothound/tests/unit/models/raid-test.js","coretheloothound/tests/unit/models/raid-test.jshint.js","coretheloothound/tests/unit/models/role-test.js","coretheloothound/tests/unit/models/role-test.jshint.js","coretheloothound/tests/unit/models/signup-test.js","coretheloothound/tests/unit/models/signup-test.jshint.js","coretheloothound/tests/unit/routes/apikey-test.js","coretheloothound/tests/unit/routes/apikey-test.jshint.js","coretheloothound/tests/unit/routes/application-test.js","coretheloothound/tests/unit/routes/application-test.jshint.js","coretheloothound/tests/unit/routes/characters/index-test.js","coretheloothound/tests/unit/routes/characters/index-test.jshint.js","coretheloothound/tests/unit/routes/raid-test.js","coretheloothound/tests/unit/routes/raid-test.jshint.js","coretheloothound/tests/unit/routes/raid/index-test.js","coretheloothound/tests/unit/routes/raid/index-test.jshint.js","coretheloothound/tests/unit/routes/raids/index-test.js","coretheloothound/tests/unit/routes/raids/index-test.jshint.js","coretheloothound/tests/unit/serializers/signup-test.js","coretheloothound/tests/unit/serializers/signup-test.jshint.js","coretheloothound/tests/unit/views/raids/index-test.js","coretheloothound/tests/unit/views/raids/index-test.jshint.js","coretheloothound/tests/views/raids/index.jshint.js","coretheloothound/transitions.js","coretheloothound/transitions/cross-fade.js","coretheloothound/transitions/fade.js","coretheloothound/transitions/flex-grow.js","coretheloothound/transitions/modal-popup.js","coretheloothound/transitions/move-over.js","coretheloothound/transitions/scroll-then.js","coretheloothound/transitions/to-down.js","coretheloothound/transitions/to-left.js","coretheloothound/transitions/to-right.js","coretheloothound/transitions/to-up.js","coretheloothound/views/liquid-child.js","coretheloothound/views/liquid-if.js","coretheloothound/views/liquid-outlet.js","coretheloothound/views/liquid-with.js","coretheloothound/views/raids/index.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('coretheloothound/adapters/application', ['exports', 'coretheloothound/config/environment', 'ember-data'], function (exports, ENV, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].ActiveModelAdapter.extend({\n    host: ENV['default'].api,\n\n    headers: (function () {\n      return {\n        Accept: \"application/json+ember\",\n        Authorization: \"apikey \" + this.get(\"storage\").getValue(\"apikey\")\n      };\n    }).property().volatile()\n  });\n\n});","define('coretheloothound/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'coretheloothound/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = false;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('coretheloothound/components/character-select', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    character: (function () {\n      return this.get(\"characters\").get(\"firstObject\");\n    }).property(\"characters.@each\"),\n\n    roleCheckboxes: Ember['default'].computed.map(\"character.roles\", function (role) {\n      return Ember['default'].ObjectProxy.create({\n        content: role,\n        checked: true\n      });\n    }),\n\n    checkedRoles: Ember['default'].computed.filterBy(\"roleCheckboxes\", \"checked\", true),\n\n    roles: Ember['default'].computed.mapBy(\"checkedRoles\", \"content\"),\n\n    actions: {\n      signup: function () {\n        var role_ids = this.get(\"roles\").mapBy(\"id\");\n        this.sendAction(\"action\", this.get(\"character\"), this.get(\"note\"), role_ids);\n        this.set(\"note\", \"\");\n      }\n    }\n  });\n\n});","define('coretheloothound/components/date-time', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    picktime: (function (key, value) {\n      if (arguments.length > 1) {\n        this.set(\"date\", moment(this.get(\"pickdate\") + \" \" + value, \"D MMMM, YYYY h:mm A\").toDate());\n      }\n\n      return moment(this.get(\"date\")).format(\"h:mm A\");\n    }).property(\"date\", \"pickdate\"),\n\n    pickdate: (function (key, value) {\n      if (arguments.length > 1) {\n        this.set(\"date\", moment(value + \" \" + this.get(\"picktime\"), \"D MMMM, YYYY h:mm A\").toDate());\n      }\n\n      return moment(this.get(\"date\")).format(\"D MMMM, YYYY\");\n    }).property(\"date\", \"picktime\"),\n\n    dateAgo: (function () {\n      return moment(this.get(\"date\")).fromNow();\n    }).property(\"date\"),\n\n    calendarDate: (function () {\n      return moment(this.get(\"date\")).calendar();\n    }).property(\"date\"),\n\n    didInsertElement: function () {\n      Ember['default'].$(\".datepicker\").pickadate();\n      Ember['default'].$(\".timepicker\").pickatime();\n    }\n  });\n\n});","define('coretheloothound/components/donut-graph', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"graph-container\"],\n\n    angle: (function () {\n      return d3.scale.linear().domain([0, 1]).range([0, 2 * Math.PI]);\n    }).property(),\n\n    arc: function (inner, outer) {\n      var angle = this.get(\"angle\");\n      return d3.svg.arc().innerRadius(inner).outerRadius(outer).startAngle(function (d) {\n        return angle(d.from);\n      }).endAngle(function (d) {\n        return angle(d.to);\n      });\n    },\n\n    arcInner: (function () {\n      return this.arc(34, 56);\n    }).property(\"angle\"),\n\n    arcOuter: (function () {\n      return this.arc(30, 60);\n    }).property(\"angle\"),\n\n    update: (function () {\n      var svg = this.get(\"svg\");\n      var data = this.get(\"data\");\n      var arcOuter = this.get(\"arcOuter\");\n      var arcInner = this.get(\"arcInner\");\n\n      var dataOuter = svg.selectAll(\"path.outer\").data(data, function (d) {\n        return d.name;\n      });\n      dataOuter.enter().append(\"path\").attr(\"class\", function (d) {\n        return \"outer border-\" + d.className;\n      }).attr(\"transform\", \"translate(60,60)\").append(\"title\").text(function (d) {\n        return d.name + \": \" + d.number;\n      });\n      dataOuter.exit().remove();\n      dataOuter.attr(\"d\", arcOuter);\n\n      var dataInner = svg.selectAll(\"path.inner\").data(data, function (d) {\n        return d.name;\n      });\n      dataInner.enter().append(\"path\").attr(\"class\", function (d) {\n        return \"inner \" + d.className;\n      }).attr(\"transform\", \"translate(60,60)\").append(\"title\").text(function (d) {\n        return d.name + \": \" + d.number;\n      });\n      dataInner.exit().remove();\n      dataInner.attr(\"d\", arcInner);\n    }).observes(\"data.@each\"),\n\n    didInsertElement: function () {\n      var element = d3.select(\"#\" + this.get(\"elementId\") + \" .graph\");\n\n      var svg = element.append(\"svg\").attr(\"height\", \"120\").attr(\"width\", \"120\");\n      this.set(\"svg\", svg);\n\n      this.update();\n    }\n  });\n\n});","define('coretheloothound/components/guild-select', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    guilds: (function () {\n      return (this.get(\"account.characters\") || Ember['default'].A([])).mapBy(\"guild\").compact().uniq().sortBy(\"name\").toArray();\n    }).property(\"account.characters.@each.guild\")\n  });\n\n});","define('coretheloothound/components/lf-overlay', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: \"span\",\n    classNames: [\"lf-overlay\"],\n    didInsertElement: function () {\n      Ember['default'].$(\"body\").addClass(\"lf-modal-open\");\n    },\n    willDestroy: function () {\n      Ember['default'].$(\"body\").removeClass(\"lf-modal-open\");\n    },\n    click: function () {\n      this.sendAction(\"clickAway\");\n    }\n  });\n\n});","define('coretheloothound/components/liquid-bind-c', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: \"\"\n  });\n\n});","define('coretheloothound/components/liquid-measured', ['exports', 'liquid-fire/mutation-observer', 'ember'], function (exports, MutationObserver, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n\n    didInsertElement: function () {\n      var self = this;\n\n      // This prevents margin collapse\n      this.$().css({\n        border: \"1px solid transparent\",\n        margin: \"-1px\"\n      });\n\n      this.didMutate();\n\n      this.observer = new MutationObserver['default'](function (mutations) {\n        self.didMutate(mutations);\n      });\n      this.observer.observe(this.get(\"element\"), {\n        attributes: true,\n        subtree: true,\n        childList: true\n      });\n      this.$().bind(\"webkitTransitionEnd\", function () {\n        self.didMutate();\n      });\n      // Chrome Memory Leak: https://bugs.webkit.org/show_bug.cgi?id=93661\n      window.addEventListener(\"unload\", function () {\n        self.willDestroyElement();\n      });\n    },\n\n    willDestroyElement: function () {\n      if (this.observer) {\n        this.observer.disconnect();\n      }\n    },\n\n    didMutate: function () {\n      Ember['default'].run.next(this, function () {\n        this._didMutate();\n      });\n    },\n\n    _didMutate: function () {\n      var elt = this.$();\n      if (!elt || !elt[0]) {\n        return;\n      }\n\n      // if jQuery sees a zero dimension, it will temporarily modify the\n      // element's css to try to make its size measurable. But that's bad\n      // for us here, because we'll get an infinite recursion of mutation\n      // events. So we trap the zero case without hitting jQuery.\n\n      if (elt[0].offsetWidth === 0) {\n        this.set(\"width\", 0);\n      } else {\n        this.set(\"width\", elt.outerWidth());\n      }\n      if (elt[0].offsetHeight === 0) {\n        this.set(\"height\", 0);\n      } else {\n        this.set(\"height\", elt.outerHeight());\n      }\n    }\n\n  });\n\n});","define('coretheloothound/components/liquid-modal', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"liquid-modal\"],\n    currentContext: Ember['default'].computed.oneWay(\"owner.modalContexts.lastObject\"),\n\n    owner: null, // set by injection\n\n    innerView: Ember['default'].computed(\"currentContext\", function () {\n      var self = this,\n          current = this.get(\"currentContext\"),\n          name = current.get(\"name\"),\n          container = this.get(\"container\"),\n          component = container.lookup(\"component-lookup:main\").lookupFactory(name);\n      Ember['default'].assert(\"Tried to render a modal using component '\" + name + \"', but couldn't find it.\", !!component);\n\n      var args = Ember['default'].copy(current.get(\"params\"));\n\n      args.registerMyself = Ember['default'].on(\"init\", function () {\n        self.set(\"innerViewInstance\", this);\n      });\n\n      // set source so we can bind other params to it\n      args._source = Ember['default'].computed(function () {\n        return current.get(\"source\");\n      });\n\n      var otherParams = current.get(\"options.otherParams\");\n      var from, to;\n      for (from in otherParams) {\n        to = otherParams[from];\n        args[to] = Ember['default'].computed.alias(\"_source.\" + from);\n      }\n\n      var actions = current.get(\"options.actions\") || {};\n\n      // Override sendAction in the modal component so we can intercept and\n      // dynamically dispatch to the controller as expected\n      args.sendAction = function (name) {\n        var actionName = actions[name];\n        if (!actionName) {\n          this._super.apply(this, Array.prototype.slice.call(arguments));\n          return;\n        }\n\n        var controller = current.get(\"source\");\n        var args = Array.prototype.slice.call(arguments, 1);\n        args.unshift(actionName);\n        controller.send.apply(controller, args);\n      };\n\n      return component.extend(args);\n    }),\n\n    actions: {\n      outsideClick: function () {\n        if (this.get(\"currentContext.options.dismissWithOutsideClick\")) {\n          this.send(\"dismiss\");\n        } else {\n          proxyToInnerInstance(this, \"outsideClick\");\n        }\n      },\n      escape: function () {\n        if (this.get(\"currentContext.options.dismissWithEscape\")) {\n          this.send(\"dismiss\");\n        } else {\n          proxyToInnerInstance(this, \"escape\");\n        }\n      },\n      dismiss: function () {\n        var source = this.get(\"currentContext.source\"),\n            proto = source.constructor.proto(),\n            params = this.get(\"currentContext.options.withParams\"),\n            clearThem = {};\n\n        for (var key in params) {\n          clearThem[key] = proto[key];\n        }\n        source.setProperties(clearThem);\n      }\n    }\n  });\n\n  function proxyToInnerInstance(self, message) {\n    var vi = self.get(\"innerViewInstance\");\n    if (vi) {\n      vi.send(message);\n    }\n  }\n\n});","define('coretheloothound/components/liquid-spacer', ['exports', 'ember', 'liquid-fire/promise'], function (exports, Ember, Promise) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    growDuration: 250,\n    growPixelsPerSecond: 200,\n    growEasing: \"slide\",\n    enabled: true,\n\n    didInsertElement: function () {\n      var child = this.$(\"> div\");\n      this.$().css({\n        overflow: \"hidden\",\n        width: child.width(),\n        height: child.height()\n      });\n    },\n\n    sizeChange: Ember['default'].observer(\"width\", \"height\", function () {\n      var elt = this.$();\n      if (!this.get(\"enabled\")) {\n        elt.width(this.get(\"width\"));\n        elt.height(this.get(\"height\"));\n        return Promise['default'].resolve();\n      }\n      return Promise['default'].all([this.adaptDimension(elt, \"width\"), this.adaptDimension(elt, \"height\")]);\n    }),\n\n    adaptDimension: function (elt, dimension) {\n      var have = elt[dimension]();\n      var want = this.get(dimension);\n      var target = {};\n      target[dimension] = want;\n\n      return Ember['default'].$.Velocity(elt[0], target, {\n        duration: this.durationFor(have, want),\n        queue: false,\n        easing: this.get(\"growEasing\")\n      });\n    },\n\n    durationFor: function (before, after) {\n      return Math.min(this.get(\"growDuration\"), 1000 * Math.abs(before - after) / this.get(\"growPixelsPerSecond\"));\n    } });\n\n});","define('coretheloothound/components/lm-container', ['exports', 'ember', 'liquid-fire/tabbable'], function (exports, Ember) {\n\n  'use strict';\n\n  /*\n     Parts of this file were adapted from ic-modal\n\n     https://github.com/instructure/ic-modal\n     Released under The MIT License (MIT)\n     Copyright (c) 2014 Instructure, Inc.\n  */\n\n  var lastOpenedModal = null;\n  Ember['default'].$(document).on(\"focusin\", handleTabIntoBrowser);\n\n  function handleTabIntoBrowser() {\n    if (lastOpenedModal) {\n      lastOpenedModal.focus();\n    }\n  }\n\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"lm-container\"],\n    attributeBindings: [\"tabindex\"],\n    tabindex: 0,\n\n    keyUp: function (event) {\n      // Escape key\n      if (event.keyCode === 27) {\n        this.sendAction();\n      }\n    },\n\n    keyDown: function (event) {\n      // Tab key\n      if (event.keyCode === 9) {\n        this.constrainTabNavigation(event);\n      }\n    },\n\n    didInsertElement: function () {\n      this.focus();\n      lastOpenedModal = this;\n    },\n\n    willDestroy: function () {\n      lastOpenedModal = null;\n    },\n\n    focus: function () {\n      if (this.get(\"element\").contains(document.activeElement)) {\n        // just let it be if we already contain the activeElement\n        return;\n      }\n      var target = this.$(\"[autofocus]\");\n      if (!target.length) {\n        target = this.$(\":tabbable\");\n      }\n\n      if (!target.length) {\n        target = this.$();\n      }\n\n      target[0].focus();\n    },\n\n    constrainTabNavigation: function (event) {\n      var tabbable = this.$(\":tabbable\");\n      var finalTabbable = tabbable[event.shiftKey ? \"first\" : \"last\"]()[0];\n      var leavingFinalTabbable = finalTabbable === document.activeElement ||\n      // handle immediate shift+tab after opening with mouse\n      this.get(\"element\") === document.activeElement;\n      if (!leavingFinalTabbable) {\n        return;\n      }\n      event.preventDefault();\n      tabbable[event.shiftKey ? \"last\" : \"first\"]()[0].focus();\n    }\n  });\n\n});","define('coretheloothound/components/raid-group', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"draggableDropzone\", \"group\"],\n    classNameBindings: [\"dragClass\"],\n    dragClass: \"\",\n\n    dragStart: function (event) {\n      alert(\"Dragging started\");\n      event.preventDefault();\n      this.set(\"dragClass\", \"dragging\");\n    },\n\n    dragOver: function (event) {\n      alert(\"Dragging Over\");\n      event.preventDefault();\n      this.set(\"dragClass\", \"\");\n    }\n  });\n\n});","define('coretheloothound/components/raid-permission', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    label: (function () {\n      var type = this.get(\"permission.type\");\n      switch (type) {\n        case \"Guild\":\n        case \"Character\":\n          return this.get(\"permission.name\");\n        default:\n          return this.get(\"permission.args\");\n      }\n    }).property(\"permission.type\", \"permission.args\"),\n\n    ownAccount: (function () {\n      return this.get(\"permission.key\") === \"Account|\" + this.get(\"account.battletag\");\n    }).property(\"permission.key\", \"account.battletag\"),\n\n    actions: {\n      deletePermission: function () {\n        this.sendAction(\"deletePermission\", this.get(\"permission\"));\n      }\n    }\n  });\n\n});","define('coretheloothound/components/raid-permissions', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    adminPermissions: Ember['default'].computed.filterBy(\"raid.permissions\", \"level\", \"admin\"),\n    memberPermissions: Ember['default'].computed.filterBy(\"raid.permissions\", \"level\", \"member\"),\n\n    actions: {\n      newAdminPermission: function () {\n        this.sendAction(\"newPermission\", \"admin\", \"Account|\" + this.get(\"adminAccount\"));\n      },\n\n      newMemberAccountPermission: function () {\n        this.sendAction(\"newPermission\", \"member\", \"Account|\" + this.get(\"memberAccount\"));\n      },\n\n      newMemberCharacterPermission: function () {\n        this.sendAction(\"newPermission\", \"member\", \"Character|\" + this.get(\"characterName\") + \":\" + this.get(\"characterRealm\"));\n      },\n\n      newMemberGuildPermission: function () {\n        this.sendAction(\"newPermission\", \"member\", \"Guild|\" + this.get(\"guildName\") + \":\" + this.get(\"guildRealm\"));\n      },\n\n      deletePermission: function (permission) {\n        this.sendAction(\"deletePermission\", permission);\n      }\n    }\n  });\n\n});","define('coretheloothound/components/raid-signup', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: \"signup\",\n\n    rolesSorting: [\"slug:desc\"],\n    sortedRoles: Ember['default'].computed.sort(\"signup.roles\", \"rolesSorting\"),\n\n    attributeBindings: [\"draggable:draggable\", \"note:title\"],\n    draggable: true,\n\n    note: (function () {\n      return this.get(\"signup.note\");\n    }).property(\"signup.note\"),\n\n    classes: (function () {\n      var classes = \"class class-\" + this.get(\"signup.character.class_id\");\n      if (this.get(\"preferred\")) {\n        classes += \" preferred\";\n      }\n      return classes;\n    }).property(\"signup.character.class_id\"),\n\n    iconClasses: (function () {\n      return \"role \" + this.get(\"signup.role.slug\");\n    }).property(\"signup.role.slug\"),\n\n    mine: (function () {\n      return this.get(\"currentAccount.id\") === this.get(\"signup.character.account.id\");\n    }).property(\"currentAccount.id\", \"signup.character.account.id\"),\n\n    actions: {\n      unsignup: function () {\n        this.sendAction(\"unsignup\", this.get(\"signup.content\"));\n      },\n      seat: function (role) {\n        this.sendAction(\"seat\", this.get(\"signup.content\"), role);\n      },\n      unseat: function () {\n        this.sendAction(\"unseat\", this.get(\"signup.content\"));\n      }\n    }\n  });\n\n});","define('coretheloothound/controllers/account', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    needs: [\"application\"],\n    account: Ember['default'].computed.alias(\"controllers.application.account\")\n  });\n\n});","define('coretheloothound/controllers/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    loggedIn: (function () {\n      return !!this.get(\"account\");\n    }).property(\"account\")\n  });\n\n});","define('coretheloothound/controllers/auth', ['exports', 'coretheloothound/config/environment', 'ember'], function (exports, ENV, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    needs: [\"application\"],\n\n    apikey: Ember['default'].computed.alias(\"controllers.application.apikey\"),\n    account: Ember['default'].computed.alias(\"controllers.application.account\"),\n    loggedIn: Ember['default'].computed.alias(\"controllers.application.loggedIn\"),\n\n    actions: {\n      logout: function () {\n        var _this = this;\n\n        Ember['default'].$.ajax({\n          type: \"GET\",\n          url: ENV['default'].api + \"/logout\",\n          headers: {\n            Authorization: \"apikey \" + _this.get(\"apikey\")\n          },\n          success: function () {\n            _this.get(\"storage\").removeValue(\"apikey\");\n            _this.set(\"apikey\", undefined);\n            _this.set(\"account\", undefined);\n            _this.transitionToRoute(\"index\");\n          }\n        });\n      }\n    }\n  });\n\n});","define('coretheloothound/controllers/character', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    dashedName: (function () {\n      return this.get(\"name\").dasherize();\n    }).property(\"name\"),\n\n    dashedRealm: (function () {\n      return this.get(\"realm\").dasherize();\n    }).property(\"realm\"),\n\n    className: (function () {\n      switch (this.get(\"class_id\")) {\n        case 1:\n          return \"Warrior\";\n        case 2:\n          return \"Paladin\";\n        case 3:\n          return \"Hunter\";\n        case 4:\n          return \"Rogue\";\n        case 5:\n          return \"Priest\";\n        case 6:\n          return \"Death Knight\";\n        case 7:\n          return \"Shaman\";\n        case 8:\n          return \"Mage\";\n        case 9:\n          return \"Warlock\";\n        case 10:\n          return \"Monk\";\n        case 11:\n          return \"Druid\";\n        case 12:\n          return \"Demon Hunter\";\n      }\n    }).property(\"class_id\"),\n\n    label: (function () {\n      return this.get(\"level\") + \": \" + this.get(\"name\") + \" - \" + this.get(\"className\") + \" - \" + this.get(\"realm\");\n    }).property(\"name\", \"realm\"),\n\n    canHeal: (function () {\n      return [2, 5, 7, 10, 11].contains(this.get(\"class_id\"));\n    }).property(\"class_id\"),\n\n    canTank: (function () {\n      return [1, 2, 6, 10, 11].contains(this.get(\"class_id\"));\n    }).property(\"class_id\"),\n\n    armoryUrl: (function () {\n      return \"http://us.battle.net/wow/character/\" + this.get(\"dashedRealm\") + \"/\" + this.get(\"dashedName\") + \"/simple\";\n    }).property(\"dashedName\", \"dashedRealm\"),\n\n    robotUrl: (function () {\n      return \"http://www.askmrrobot.com/wow/player/us/\" + this.get(\"dashedRealm\") + \"/\" + this.get(\"dashedName\");\n    }).property(\"dashedName\", \"dashedRealm\"),\n\n    wowheadUrl: (function () {\n      return \"http://www.wowhead.com/list/us-\" + this.get(\"dashedRealm\") + \"-\" + this.get(\"dashedName\");\n    }).property(\"dashedName\", \"dashedRealm\")\n  });\n\n});","define('coretheloothound/controllers/characters/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    realm: \"All\",\n    onlyMax: true,\n\n    updateRealm: (function () {\n      var realm = this.get(\"realm\");\n\n      if (realm) {\n        window.localStorage.setItem(\"coretheloothound_realm\", realm);\n      }\n    }).observes(\"realm\"),\n\n    realms: (function () {\n      this.set(\"realm\", window.localStorage.getItem(\"coretheloothound_realm\") || \"All\");\n\n      return [\"All\"].concat(_.uniq(this.get(\"model\").mapBy(\"realm\")).sort());\n    }).property(\"model.@each.realm\"),\n\n    sortProperties: [\"level:desc\", \"name\"],\n    sorted: Ember['default'].computed.sort(\"model\", \"sortProperties\"),\n\n    filtered: (function () {\n      var realm = this.get(\"realm\");\n      var onlyMax = this.get(\"onlyMax\");\n\n      return this.get(\"sorted\").filter(function (character) {\n        if (onlyMax && character.get(\"level\") < 100) {\n          return false;\n        }\n\n        if (!realm || realm === \"All\") {\n          return true;\n        } else {\n          return realm === character.get(\"realm\");\n        }\n      });\n    }).property(\"sorted\", \"onlyMax\", \"realm\")\n  });\n\n});","define('coretheloothound/controllers/raid', ['exports', 'ember', 'coretheloothound/controllers/character'], function (exports, Ember, CharacterController) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    needs: [\"application\", \"raids/index\"],\n    currentAccount: Ember['default'].computed.alias(\"controllers.application.account\"),\n    roles: Ember['default'].computed.alias(\"controllers.raids/index.roles\"),\n\n    rolesSorting: [\"slug:desc\"],\n    sortedRoles: Ember['default'].computed.sort(\"roles\", \"rolesSorting\"),\n\n    seatedByRole: (function () {\n      var _this = this;\n\n      return this.get(\"sortedRoles\").map(function (role) {\n        return Ember['default'].Object.create({\n          role: role,\n          signups: _this.get(\"seated\").filterBy(\"role.id\", role.get(\"id\"))\n        });\n      });\n    }).property(\"sortedRoles.@each.id\", \"seated.@each.role\"),\n\n    currentAccountSeated: (function () {\n      var accountId = this.get(\"currentAccount.id\").toString();\n      return this.get(\"seated\").findBy(\"character.account.id\", accountId);\n    }).property(\"seated.@each.character\", \"currentAccount.id\"),\n\n    currentAccountSignedUp: (function () {\n      var accountId = this.get(\"currentAccount.id\").toString();\n      return this.get(\"signups\").filterBy(\"character.account.id\", accountId);\n    }).property(\"signups.@each.character\", \"currentAccount.id\"),\n\n    characters: (function () {\n      var ids = this.get(\"signedUpCharacterIds\");\n      return this.get(\"currentAccount.characters\").filter(function (character) {\n        return !ids.contains(character.get(\"id\"));\n      }).map(function (character) {\n        return CharacterController['default'].create({\n          model: character\n        });\n      }).sort(function (a, b) {\n        var diff = b.get(\"level\") - a.get(\"level\");\n        if (diff) {\n          return diff;\n        } else {\n          return a.get(\"name\").localeCompare(b.get(\"name\"));\n        }\n      });\n    }).property(\"currentAccount.characters\", \"signedUpCharacterIds\")\n  });\n\n});","define('coretheloothound/controllers/raid/index', ['exports', 'ember', 'coretheloothound/controllers/character'], function (exports, Ember, CharacterController) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    needs: [\"application\", \"raids/index\"],\n    currentAccount: Ember['default'].computed.alias(\"controllers.application.account\"),\n    roles: Ember['default'].computed.alias(\"controllers.raids/index.roles\"),\n\n    rolesSorting: [\"slug:desc\"],\n    sortedRoles: Ember['default'].computed.sort(\"roles\", \"rolesSorting\"),\n\n    seatedByRole: (function () {\n      var _this = this;\n\n      return this.get(\"sortedRoles\").map(function (role) {\n        return Ember['default'].Object.create({\n          role: role,\n          signups: _this.get(\"seated\").filterBy(\"role.id\", role.get(\"id\"))\n        });\n      });\n    }).property(\"sortedRoles.@each.id\", \"seated.@each.role\"),\n\n    currentAccountSeated: (function () {\n      var accountId = this.get(\"currentAccount.id\").toString();\n      return this.get(\"seated\").findBy(\"character.account.id\", accountId);\n    }).property(\"seated.@each.character\", \"currentAccount.id\"),\n\n    currentAccountSignedUp: (function () {\n      var accountId = this.get(\"currentAccount.id\").toString();\n      return this.get(\"signups\").filterBy(\"character.account.id\", accountId);\n    }).property(\"signups.@each.character\", \"currentAccount.id\"),\n\n    characters: (function () {\n      var ids = this.get(\"signedUpCharacterIds\");\n      return this.get(\"currentAccount.characters\").filter(function (character) {\n        return !ids.contains(character.get(\"id\"));\n      }).map(function (character) {\n        return CharacterController['default'].create({\n          model: character\n        });\n      }).sort(function (a, b) {\n        var diff = b.get(\"level\") - a.get(\"level\");\n        if (diff) {\n          return diff;\n        } else {\n          return a.get(\"name\").localeCompare(b.get(\"name\"));\n        }\n      });\n    }).property(\"currentAccount.characters\", \"signedUpCharacterIds\")\n  });\n\n});","define('coretheloothound/controllers/raids/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ArrayController.extend({\n    sortProperties: [\"date\", \"name\"],\n    itemController: \"raid\"\n  });\n\n});","define('coretheloothound/controllers/raids/new', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    needs: [\"application\"],\n    account: Ember['default'].computed.alias(\"controllers.application.account\"),\n\n    init: function () {\n      this._super();\n      this.set(\"name\", \"\");\n      this.set(\"date\", moment().endOf(\"isoWeek\").hour(19).minute(0).second(0).add(2, \"days\").toDate());\n      this.set(\"hidden\", true);\n    },\n\n    actions: {\n      create: function () {\n        var _this = this;\n\n        var raid = this.store.createRecord(\"raid\", {\n          name: this.get(\"name\"),\n          guild: this.get(\"guild\"),\n          date: this.get(\"date\"),\n          hidden: this.get(\"hidden\")\n        });\n\n        raid.save().then(function (raid) {\n          _this.init();\n          _this.transitionToRoute(\"raid\", raid);\n        });\n      }\n    }\n  });\n\n});","define('coretheloothound/controllers/role', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    number: (function () {\n      var id = this.get(\"id\");\n      return this.get(\"parentController.seated\").filter(function (signup) {\n        return signup.get(\"role.id\") === id;\n      }).get(\"length\");\n    }).property(\"parentController.seated.@each.role\"),\n\n    statClasses: (function () {\n      return \"stat \" + this.get(\"iconClasses\");\n    }).property(\"iconClasses\"),\n\n    iconClasses: (function () {\n      return \"role \" + this.get(\"slug\");\n    }).property(\"slug\")\n  });\n\n});","define('coretheloothound/controllers/signup', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    // This signup can be seated if they are currently in the waiting list\n    canBeSeated: (function () {\n      var waitingList = this.get(\"parentController.waitingList\");\n      return waitingList.map(function (signup) {\n        return signup.get(\"id\");\n      }).contains(this.get(\"id\"));\n    }).property(\"parentController.waitingList.@each\")\n  });\n\n});","define('coretheloothound/helpers/character-class', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.characterClass = characterClass;\n\n  function characterClass(class_id) {\n    var classes = {\n      1: \"Warrior\",\n      2: \"Paladin\",\n      3: \"Hunter\",\n      4: \"Rogue\",\n      5: \"Priest\",\n      6: \"Death Knight\",\n      7: \"Shaman\",\n      8: \"Mage\",\n      9: \"Warlock\",\n      10: \"Monk\",\n      11: \"Druid\",\n      12: \"Demon Hunter\"\n    };\n\n    return new Ember['default'].Handlebars.SafeString(\"<span class=\\\"class-\" + class_id + \"\\\">\" + classes[class_id] + \"</span>\");\n  }exports['default'] = Ember['default'].Handlebars.makeBoundHelper(characterClass);\n\n});","define('coretheloothound/helpers/character-faction', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.characterFaction = characterFaction;\n\n  function characterFaction(race_id) {\n    switch (race_id) {\n      case 1:\n      case 3:\n      case 4:\n      case 7:\n      case 11:\n      case 22:\n      case 25:\n        return \"Alliance\";\n      case 2:\n      case 5:\n      case 6:\n      case 8:\n      case 9:\n      case 10:\n      case 26:\n        return \"Horde\";\n      case 24:\n        return \"Neutral\";\n      default:\n        return \"Neutral\";\n    }\n  }exports['default'] = Ember['default'].Handlebars.makeBoundHelper(characterFaction);\n\n});","define('coretheloothound/helpers/character-race', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.characterRace = characterRace;\n\n  function characterRace(race_id) {\n    var faction = function (race_id) {\n      switch (race_id) {\n        case 1:\n        case 3:\n        case 4:\n        case 7:\n        case 11:\n        case 22:\n        case 25:\n          return \"alliance\";\n        case 2:\n        case 5:\n        case 6:\n        case 8:\n        case 9:\n        case 10:\n        case 26:\n          return \"horde\";\n        case 24:\n          return \"neutral\";\n        default:\n          return \"neutral\";\n      }\n    };\n\n    var races = {\n      1: \"Human\",\n      2: \"Orc\",\n      3: \"Dwarf\",\n      4: \"Night Elf\",\n      5: \"Undead\",\n      6: \"Tauren\",\n      7: \"Gnome\",\n      8: \"Troll\",\n      9: \"Goblin\",\n      10: \"Blood Elf\",\n      11: \"Draenei\",\n      22: \"Worgen\",\n      24: \"Pandaren\",\n      25: \"Pandaren\",\n      26: \"Pandaren\"\n    };\n\n    return new Ember['default'].Handlebars.SafeString(\"<span class=\\\"\" + faction(race_id) + \"\\\">\" + races[race_id] + \"</span>\");\n  }exports['default'] = Ember['default'].Handlebars.makeBoundHelper(characterRace);\n\n});","define('coretheloothound/helpers/liquid-bind', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /* liquid-bind is really just liquid-with with a pre-provided block\n     that just says {{this}} */\n  function liquidBindHelperFunc() {\n    var options = arguments[arguments.length - 1];\n    var container = options.data.view.container;\n    var componentLookup = container.lookup(\"component-lookup:main\");\n    var cls = componentLookup.lookupFactory(\"liquid-bind-c\");\n    options.hash.value = arguments[0];\n    options.hashTypes.value = options.types[0];\n\n    if (options.hash[\"class\"]) {\n      options.hash.innerClass = options.hash[\"class\"];\n      delete options.hash[\"class\"];\n      options.hashTypes.innerClass = options.hashTypes[\"class\"];\n      delete options.hashTypes[\"class\"];\n    }\n    Ember['default'].Handlebars.helpers.view.call(this, cls, options);\n  }\n\n  function htmlbarsLiquidBindHelper(params, hash, options, env) {\n    var componentLookup = this.container.lookup(\"component-lookup:main\");\n    var cls = componentLookup.lookupFactory(\"liquid-bind-c\");\n    hash.value = params[0];\n    if (hash[\"class\"]) {\n      hash.innerClass = hash[\"class\"];\n      delete hash[\"class\"];\n    }\n    env.helpers.view.helperFunction.call(this, [cls], hash, options, env);\n  }\n\n  var liquidBindHelper;\n\n  if (Ember['default'].HTMLBars) {\n    liquidBindHelper = {\n      isHTMLBars: true,\n      helperFunction: htmlbarsLiquidBindHelper\n    };\n  } else {\n    liquidBindHelper = liquidBindHelperFunc;\n  }\n\n  exports['default'] = liquidBindHelper;\n\n});","define('coretheloothound/helpers/liquid-if', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.factory = factory;\n\n  var isHTMLBars = !!Ember['default'].HTMLBars;function factory(invert) {\n    function helperFunc() {\n      var property, hash, options, env, container;\n\n      if (isHTMLBars) {\n        property = arguments[0][0];\n        hash = arguments[1];\n        options = arguments[2];\n        env = arguments[3];\n        container = this.container;\n      } else {\n        property = arguments[0];\n        options = arguments[1];\n        hash = options.hash;\n        container = options.data.view.container;\n      }\n      var View = container.lookupFactory(\"view:liquid-if\");\n\n      var templates = [options.fn || options.template, options.inverse];\n      if (invert) {\n        templates.reverse();\n      }\n      delete options.fn;\n      delete options.template;\n      delete options.inverse;\n\n      if (hash.containerless) {\n        View = View.extend(Ember['default']._Metamorph);\n      }\n\n      hash.templates = templates;\n\n      if (isHTMLBars) {\n        hash.showFirst = property;\n        env.helpers.view.helperFunction.call(this, [View], hash, options, env);\n      } else {\n        hash.showFirstBinding = property;\n        return Ember['default'].Handlebars.helpers.view.call(this, View, options);\n      }\n    }\n\n    if (Ember['default'].HTMLBars) {\n      return {\n        isHTMLBars: true,\n        helperFunction: helperFunc,\n        preprocessArguments: function () {}\n      };\n    } else {\n      return helperFunc;\n    }\n  }exports['default'] = factory(false);\n\n});","define('coretheloothound/helpers/liquid-measure', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = function () {\n    Ember['default'].assert(\"liquid-measure is deprecated, see CHANGELOG.md\", false);\n  };\n\n});","define('coretheloothound/helpers/liquid-outlet', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var isHTMLBars = !!Ember['default'].HTMLBars;\n\n  function liquidOutletHelperFunc(property, options) {\n    var property, options, container, hash, env;\n\n    if (isHTMLBars) {\n      property = arguments[0][0]; // params[0]\n      hash = arguments[1];\n      options = arguments[2];\n      env = arguments[3];\n      container = this.container;\n\n      if (!property) {\n        property = \"main\";\n        options.paramTypes = [\"string\"];\n      }\n    } else {\n      property = arguments[0];\n\n      if (property && property.data && property.data.isRenderData) {\n        options = property;\n        property = \"main\";\n        options.types = [\"STRING\"];\n      }\n\n      container = options.data.view.container;\n      hash = options.hash;\n    }\n\n    var View = container.lookupFactory(\"view:liquid-outlet\");\n    if (hash.containerless) {\n      View = View.extend(Ember['default']._Metamorph);\n    }\n    hash.viewClass = View;\n\n    if (isHTMLBars) {\n      env.helpers.outlet.helperFunction.call(this, [property], hash, options, env);\n    } else {\n      return Ember['default'].Handlebars.helpers.outlet.call(this, property, options);\n    }\n  }\n\n  var liquidOutletHelper = liquidOutletHelperFunc;\n  if (Ember['default'].HTMLBars) {\n    liquidOutletHelper = {\n      isHTMLBars: true,\n      helperFunction: liquidOutletHelperFunc,\n      preprocessArguments: function () {}\n    };\n  }\n\n  exports['default'] = liquidOutletHelper;\n\n});","define('coretheloothound/helpers/liquid-unless', ['exports', 'coretheloothound/helpers/liquid-if'], function (exports, liquid_if) {\n\n\t'use strict';\n\n\texports['default'] = liquid_if.factory(true);\n\n});","define('coretheloothound/helpers/liquid-with', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var isHTMLBars = !!Ember['default'].HTMLBars;\n\n  function liquidWithHelperFunc() {\n    var params, context, options, container, innerOptions, data, hash, env;\n\n    var innerOptions = {\n      hashTypes: {}\n    };\n\n    var innerHash = {};\n\n    if (isHTMLBars) {\n      params = arguments[0];\n      hash = arguments[1];\n      options = arguments[2];\n      env = arguments[3];\n      context = params[0];\n      container = this.container;\n      data = arguments[3].data;\n      innerOptions.morph = options.morph;\n\n      if (params.length === 3) {\n        hash.keywordName = params[2]._label;\n        params = [context];\n      }\n      innerHash.boundContext = context;\n    } else {\n      params = Array.prototype.slice.apply(arguments, [0, -1]);\n      context = arguments[0];\n      options = arguments[arguments.length - 1];\n      data = options.data;\n      hash = options.hash;\n      container = data.view.container;\n      innerOptions.data = data;\n      innerOptions.hash = innerHash;\n      innerHash.boundContextBinding = context;\n    }\n\n    var View = container.lookupFactory(\"view:liquid-with\");\n\n    View = View.extend({\n      originalArgs: params,\n      originalHash: hash,\n      originalHashTypes: options.hashTypes,\n      innerTemplate: options.fn || options.template\n    });\n\n    var containerless = isHTMLBars && hash.containerless && (!hash.containerless.isStream || hash.containerless.value()) || !isHTMLBars && (options.hashTypes.containerless === \"BOOLEAN\" && hash.containerless || options.hashTypes.containerless === \"ID\" && this.containerless);\n\n    if (containerless) {\n      View = View.extend(Ember['default']._Metamorph);\n    }\n\n\n    [\"class\", \"classNames\", \"classNameBindings\", \"use\", \"id\", \"growDuration\", \"growPixelsPerSecond\", \"growEasing\", \"enableGrowth\", \"containerless\"].forEach(function (field) {\n      if (hash.hasOwnProperty(field)) {\n        innerHash[field] = hash[field];\n        innerOptions.hashTypes[field] = options.hashTypes ? options.hashTypes[field] : undefined;\n      }\n    });\n\n    if (isHTMLBars) {\n      env.helpers.view.helperFunction.call(this, [View], innerHash, innerOptions, env);\n    } else {\n      if (containerless) {\n        delete innerOptions.hash[\"class\"];\n        delete innerOptions.hash.classNames;\n        delete innerOptions.hash.classNameBindings;\n      }\n      return Ember['default'].Handlebars.helpers.view.call(this, View, innerOptions);\n    }\n  }\n\n  var liquidWithHelper = liquidWithHelperFunc;\n  if (isHTMLBars) {\n    liquidWithHelper = {\n      isHTMLBars: true,\n      helperFunction: liquidWithHelperFunc,\n      preprocessArguments: function () {}\n    };\n  }\n\n  exports['default'] = liquidWithHelper;\n\n});","define('coretheloothound/helpers/with-apply', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var isHTMLBars = !!Ember['default'].HTMLBars;\n\n  // This helper is internal to liquid-with.\n  function withApplyHelperFunc() {\n    var hash, options, env, view;\n\n    if (isHTMLBars) {\n      hash = arguments[1];\n      options = arguments[2];\n      env = arguments[3];\n      view = this;\n    } else {\n      options = arguments[0];\n      hash = options.hash;\n      view = options.data.view;\n    }\n\n    var parent = view.get(\"liquidWithParent\");\n    var withArgs = parent.get(\"originalArgs\").slice();\n\n    withArgs[0] = \"lwith-view.boundContext\";\n    options = Ember['default'].copy(options);\n\n    // This works to inject our keyword in Ember >= 1.9\n    if (!view._keywords) {\n      view._keywords = {};\n    }\n    view._keywords[\"lwith-view\"] = view;\n\n    // This works to inject our keyword in Ember < 1.9\n    if (!isHTMLBars) {\n      if (!options.data.keywords) {\n        options.data.keywords = {};\n      }\n      options.data.keywords[\"lwith-view\"] = view;\n    }\n\n    if (isHTMLBars) {\n      options.template = parent.get(\"innerTemplate\");\n    } else {\n      options.fn = parent.get(\"innerTemplate\");\n    }\n\n    hash = parent.get(\"originalHash\");\n    options.hashTypes = parent.get(\"originalHashTypes\");\n\n    if (isHTMLBars) {\n      env.helpers[\"with\"].helperFunction.call(this, [view.getStream(withArgs[0])], hash, options, env);\n    } else {\n      options.hash = hash;\n      withArgs.push(options);\n      return Ember['default'].Handlebars.helpers[\"with\"].apply(this, withArgs);\n    }\n  }\n\n  var withApplyHelper = withApplyHelperFunc;\n  if (Ember['default'].HTMLBars) {\n    withApplyHelper = {\n      isHTMLBars: true,\n      helperFunction: withApplyHelperFunc,\n      preprocessArguments: function () {}\n    };\n  }\n\n  exports['default'] = withApplyHelper;\n\n});","define('coretheloothound/initializers/app-version', ['exports', 'coretheloothound/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function (container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('coretheloothound/initializers/export-application-global', ['exports', 'ember', 'coretheloothound/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (config['default'].exportApplicationGlobal !== false) {\n      var value = config['default'].exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === \"string\") {\n        globalName = value;\n      } else {\n        globalName = Ember['default'].String.classify(config['default'].modulePrefix);\n      }\n\n      if (!window[globalName]) {\n        window[globalName] = application;\n\n        application.reopen({\n          willDestroy: function () {\n            this._super.apply(this, arguments);\n            delete window[globalName];\n          }\n        });\n      }\n    }\n  }exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('coretheloothound/initializers/link-view', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    Ember['default'].LinkView.reopen({\n      attributeBindings: [\"data-content\", \"data-toggle\"]\n    });\n  }exports['default'] = {\n    name: \"link-view\",\n    initialize: initialize\n  };\n\n});","define('coretheloothound/initializers/liquid-fire', ['exports', 'liquid-fire', 'ember'], function (exports, liquid_fire, Ember) {\n\n  'use strict';\n\n  exports['default'] = {\n    name: \"liquid-fire\",\n\n    initialize: function (container) {\n      if (!Ember['default'].$.Velocity) {\n        Ember['default'].warn(\"Velocity.js is missing\");\n      } else {\n        var version = Ember['default'].$.Velocity.version;\n        var recommended = [0, 11, 8];\n        if (Ember['default'].compare(recommended, [version.major, version.minor, version.patch]) === 1) {\n          Ember['default'].warn(\"You should probably upgrade Velocity.js, recommended minimum is \" + recommended.join(\".\"));\n        }\n      }\n\n      liquid_fire.initialize(container);\n    }\n  };\n\n});","define('coretheloothound/initializers/storage', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    //application.register('service:storage', 'model:storage');\n    application.inject(\"route\", \"storage\", \"model:storage\");\n    application.inject(\"controller\", \"storage\", \"model:storage\");\n    application.inject(\"adapter\", \"storage\", \"model:storage\");\n  }exports['default'] = {\n    name: \"storage\",\n    initialize: initialize\n  };\n\n});","define('coretheloothound/mixins/after-render', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Mixin.create({\n    // This hook is guaranteed to be executed when the root element of this view has been inserted into the DOM.\n    didInsertElement: function () {\n      this._super();\n      Ember['default'].run.scheduleOnce(\"afterRender\", this, this.afterRenderEvent);\n    },\n\n    afterRenderEvent: Ember['default'].K\n  });\n\n});","define('coretheloothound/models/account', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    accountId: DS['default'].attr(\"string\"),\n    battletag: DS['default'].attr(\"string\"),\n    characters: DS['default'].hasMany(\"character\"),\n    raids: DS['default'].hasMany(\"raid\")\n  });\n\n});","define('coretheloothound/models/character', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    name: DS['default'].attr(\"string\"),\n    realm: DS['default'].attr(\"string\"),\n\n    level: DS['default'].attr(\"number\"),\n    item_level: DS['default'].attr(\"number\"),\n\n    class_id: DS['default'].attr(\"number\"),\n    race_id: DS['default'].attr(\"number\"),\n    gender_id: DS['default'].attr(\"number\"),\n\n    image_url: DS['default'].attr(\"string\"),\n\n    account: DS['default'].belongsTo(\"account\"),\n    guild: DS['default'].belongsTo(\"guild\"),\n    signups: DS['default'].hasMany(\"signup\"),\n    roles: DS['default'].hasMany(\"role\")\n  });\n\n});","define('coretheloothound/models/guild', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    name: DS['default'].attr(\"string\"),\n    realm: DS['default'].attr(\"string\"),\n\n    icon: DS['default'].attr(\"number\"),\n    border: DS['default'].attr(\"number\"),\n\n    iconPadded: (function () {\n      var icon = this.get(\"icon\");\n      return _.pad(icon, 2, \"0\");\n    }).property(\"icon\"),\n\n    iconColor: DS['default'].attr(\"string\"),\n    borderColor: DS['default'].attr(\"string\"),\n    backgroundColor: DS['default'].attr(\"string\"),\n\n    iconHexColor: (function () {\n      return \"#\" + this.get(\"iconColor\").substring(2, 8);\n    }).property(\"iconColor\"),\n\n    borderHexColor: (function () {\n      return \"#\" + this.get(\"borderColor\").substring(2, 8);\n    }).property(\"borderColor\"),\n\n    backgroundHexColor: (function () {\n      return \"#\" + this.get(\"backgroundColor\").substring(2, 8);\n    }).property(\"backgroundColor\"),\n\n    backgroundStyle: (function () {\n      return \"background-color: \" + this.get(\"backgroundHexColor\") + \"; border-color: \" + this.get(\"borderHexColor\") + \";\";\n    }).property(\"backgroundHexColor\", \"borderHexColor\"),\n\n    iconStyle: (function () {\n      return \"background-color: \" + this.get(\"iconHexColor\") + \"; -webkit-mask-box-image: url('https://us.battle.net/wow/static/images/guild/tabards/emblem_\" + this.get(\"iconPadded\") + \".png');\";\n    }).property(\"iconHexColor\", \"iconPadded\"),\n\n    characters: DS['default'].hasMany(\"character\"),\n\n    fullName: (function () {\n      return this.get(\"name\") + \" - \" + this.get(\"realm\");\n    }).property(\"name\", \"realm\"),\n\n    url: (function () {\n      return \"http://us.battle.net/wow/guild/\" + encodeURIComponent(this.get(\"realm\")) + \"/\" + encodeURIComponent(this.get(\"name\")) + \"/\";\n    }).property(\"name\", \"realm\")\n  });\n\n});","define('coretheloothound/models/permission', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    permissioned: DS['default'].belongsTo(\"permissioned\", { polymorphic: true }),\n    level: DS['default'].attr(\"string\"),\n    key: DS['default'].attr(\"string\"),\n\n    type: (function () {\n      return this.get(\"key\").split(\"|\")[0];\n    }).property(\"key\"),\n\n    args: (function () {\n      return this.get(\"key\").split(\"|\")[1];\n    }).property(\"key\"),\n\n    name: (function () {\n      return this.get(\"args\").split(\":\")[0];\n    }).property(\"args\"),\n\n    realm: (function () {\n      return this.get(\"args\").split(\":\")[1];\n    }).property(\"args\")\n  });\n\n});","define('coretheloothound/models/permissioned', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    permissions: DS['default'].hasMany(\"permission\")\n  });\n\n});","define('coretheloothound/models/raid', ['exports', 'ember-data', 'ember', 'coretheloothound/models/permissioned'], function (exports, DS, Ember, Permissioned) {\n\n  'use strict';\n\n  exports['default'] = Permissioned['default'].extend({\n    name: DS['default'].attr(\"string\"),\n    date: DS['default'].attr(\"date\"),\n    note: DS['default'].attr(\"string\"),\n    account: DS['default'].belongsTo(\"account\"),\n    groups: DS['default'].attr(),\n    admin: DS['default'].attr(),\n    guild: DS['default'].belongsTo(\"guild\"),\n    signups: DS['default'].hasMany(\"signup\"),\n    finalized: DS['default'].attr(),\n    hidden: DS['default'].attr(),\n\n    moreThanOneGroup: (function () {\n      return this.get(\"groups.number\") > 1;\n    }).property(\"groups.number\"),\n\n    signedUpCharacterIds: (function () {\n      return this.get(\"signups\").map(function (signup) {\n        return signup.get(\"character.id\");\n      });\n    }).property(\"signups.@each.character\"),\n\n    hiddenAndNotFinalized: (function () {\n      return this.get(\"hidden\") && !this.get(\"finalized\");\n    }).property(\"hidden\", \"finalized\"),\n\n    dateAgo: (function () {\n      return moment(this.get(\"date\")).fromNow();\n    }).property(\"date\"),\n\n    dateCalendar: (function () {\n      return moment(this.get(\"date\")).calendar();\n    }).property(\"date\"),\n\n    accountSignups: (function () {\n      return this.get(\"signups\").map(function (signup) {\n        return signup.get(\"character.account.id\");\n      }).uniq().get(\"length\");\n    }).property(\"signups.@each.character\"),\n\n    accountWaitingList: (function () {\n      return this.get(\"waitingList\").map(function (signup) {\n        return signup.get(\"character.account.id\");\n      }).uniq().get(\"length\");\n    }).property(\"waitingList.@each.character\"),\n\n    accountSeated: (function () {\n      return this.get(\"seated\").map(function (signup) {\n        return signup.get(\"character.account.id\");\n      }).uniq().get(\"length\");\n    }).property(\"seated.@each.character\"),\n\n    totalSlots: (function () {\n      var groups = this.get(\"groups\");\n      return groups.size * groups.number;\n    }).property(\"groups\"),\n\n    className: function (class_id) {\n      switch (class_id) {\n        case 1:\n          return \"Warrior\";\n        case 2:\n          return \"Paladin\";\n        case 3:\n          return \"Hunter\";\n        case 4:\n          return \"Rogue\";\n        case 5:\n          return \"Priest\";\n        case 6:\n          return \"Death Knight\";\n        case 7:\n          return \"Shaman\";\n        case 8:\n          return \"Mage\";\n        case 9:\n          return \"Warlock\";\n        case 10:\n          return \"Monk\";\n        case 11:\n          return \"Druid\";\n        default:\n          return \"\";\n      }\n    },\n\n    hasWaitingList: (function () {\n      return this.get(\"waitingList.length\") > 0;\n    }).property(\"waitingList.length\"),\n\n    hasSeated: (function () {\n      return this.get(\"seated.length\") > 0;\n    }).property(\"seated.length\"),\n\n    seatedUnsorted: Ember['default'].computed.filterBy(\"signups\", \"seated\", true),\n    seatedSortFields: [\"name\"],\n    seated: Ember['default'].computed.sort(\"seatedUnsorted\", \"seatedSortFields\"),\n    unseated: Ember['default'].computed.filterBy(\"signups\", \"seated\", false),\n\n    // Waiting list doesn't include anyone from an account that has been seated\n    waitingList: (function () {\n      var seated = this.get(\"seated\");\n      var unseated = this.get(\"unseated\");\n      var account_ids = seated.map(function (signup) {\n        return signup.get(\"character.account.id\");\n      }).uniq();\n      return unseated.filter(function (signup) {\n        return !account_ids.contains(signup.get(\"character.account.id\"));\n      }).sortBy(\"character.account.battletag\");\n    }).property(\"seated.@each.character\", \"unseated.@each.character\"),\n\n    waitingListByAccount: (function () {\n      var _this = this;\n\n      return this.get(\"waitingList\").mapBy(\"character.account\").uniq().map(function (account) {\n        return Ember['default'].Object.create({\n          account: account,\n          signups: _this.get(\"waitingList\").filterBy(\"character.account.id\", account.get(\"id\"))\n        });\n      });\n    }).property(\"waitingList.@each.account\")\n  });\n\n});","define('coretheloothound/models/role', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    name: DS['default'].attr(),\n    slug: DS['default'].attr(),\n    icon: DS['default'].attr(),\n    class_ids: DS['default'].attr(),\n\n    iconClasses: (function () {\n      return \"role \" + this.get(\"slug\");\n    }).property(\"slug\")\n  });\n\n});","define('coretheloothound/models/signup', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    raid: DS['default'].belongsTo(\"raid\"),\n    character: DS['default'].belongsTo(\"character\"),\n    role: DS['default'].belongsTo(\"role\"),\n    roles: DS['default'].hasMany(\"role\"),\n    seated: DS['default'].attr(),\n    preferred: DS['default'].attr(),\n    note: DS['default'].attr()\n  });\n\n});","define('coretheloothound/models/storage', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /* global Modernizr */\n\n  exports['default'] = Ember['default'].Object.extend({\n    base: \"coretheloothound_\",\n\n    getValue: function (key) {\n      if (Modernizr.localstorage) {\n        return window.localStorage.getItem(this.get(\"base\") + key);\n      } else {\n        return Ember['default'].$.cookie(this.get(\"base\") + key);\n      }\n    },\n\n    setValue: function (key, value) {\n      if (Modernizr.localstorage) {\n        window.localStorage.setItem(this.get(\"base\") + key, value);\n      } else {\n        Ember['default'].$.cookie(this.get(\"base\") + key, value);\n      }\n    },\n\n    removeValue: function (key) {\n      if (Modernizr.localstorage) {\n        window.localStorage.removeItem(this.get(\"base\") + key);\n      } else {\n        Ember['default'].$.removeCookie(this.get(\"base\") + key);\n      }\n    }\n  });\n\n});","define('coretheloothound/router', ['exports', 'ember', 'coretheloothound/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    // Login\n    this.route(\"apikey\", { path: \"/apikey/:apikey\" });\n\n    // Raiding!\n    this.resource(\"raids\", function () {\n      this.route(\"new\");\n    });\n    this.resource(\"raid\", { path: \"/raid/:raid_id\" }, function () {\n      this.route(\"edit\");\n    });\n\n    // User Preference Pages\n    this.resource(\"account\", function () {\n      this.resource(\"characters\", function () {});\n    });\n  });\n\n  exports['default'] = Router;\n\n});","define('coretheloothound/routes/apikey', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function (params) {\n      return params.apikey;\n    },\n\n    afterModel: function (apikey, transition) {\n      this.get(\"storage\").setValue(\"apikey\", apikey);\n      transition.send(\"loadUser\");\n      this.transitionTo(\"raids.index\");\n    }\n  });\n\n});","define('coretheloothound/routes/application', ['exports', 'coretheloothound/config/environment', 'ember'], function (exports, ENV, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      var _this = this;\n      var apikey = this.get(\"storage\").getValue(\"apikey\");\n\n      if (apikey) {\n        return new Ember['default'].RSVP.Promise(function (resolve) {\n          Ember['default'].$.ajax({\n            type: \"GET\",\n            url: ENV['default'].api + \"/account\",\n            headers: {\n              Accept: \"application/json+ember\",\n              Authorization: \"apikey \" + apikey\n            },\n            success: function (data) {\n              delete data.permissions;\n              _this.store.pushPayload(\"account\", data);\n\n              _this.store.find(\"account\", data.account.id).then(function (account) {\n                resolve({\n                  apikey: apikey,\n                  account: account\n                });\n              });\n            },\n            error: function () {\n              // Bad API key\n              resolve({\n                apikey: undefined,\n                account: undefined\n              });\n            }\n          });\n        });\n      } else {\n        return {\n          apikey: undefined,\n          account: undefined\n        };\n      }\n    },\n\n    setupController: function (controller, model) {\n      controller.set(\"apikey\", model.apikey);\n      controller.set(\"account\", model.account);\n    },\n\n    actions: {\n      loadUser: function () {\n        this.refresh();\n      },\n\n      login: function () {\n        Ember['default'].$.ajax({\n          type: \"GET\",\n          url: ENV['default'].api + \"/login\",\n          headers: {\n            Accept: \"application/json+ember\"\n          },\n          data: {\n            redirect: window.location.protocol + \"//\" + window.location.host + \"/#/apikey/\"\n          },\n          success: function (data) {\n            window.location = data.href;\n          }\n        });\n      }\n    }\n  });\n\n});","define('coretheloothound/routes/characters/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      return this.modelFor(\"application\").account.get(\"characters\");\n    }\n  });\n\n});","define('coretheloothound/routes/raid', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function (params) {\n      return this.store.find(\"raid\", params.raid_id);\n    },\n\n    setupController: function (controller, model) {\n      controller.set(\"model\", model);\n      controller.set(\"roles\", this.store.all(\"role\"));\n    },\n\n    actions: {\n      hide: function () {\n        var raid = this.currentModel;\n        raid.set(\"hidden\", true);\n        raid.save();\n      },\n\n      unhide: function () {\n        var raid = this.currentModel;\n        raid.set(\"hidden\", false);\n        raid.save();\n      },\n\n      finalize: function () {\n        var raid = this.currentModel;\n        raid.set(\"finalized\", true);\n        raid.save();\n      },\n\n      unfinalize: function () {\n        var raid = this.currentModel;\n        raid.set(\"finalized\", false);\n        raid.save();\n      },\n\n      \"delete\": function () {\n        var _this = this;\n        var raid = this.currentModel;\n        if (window.confirm(\"Are you sure you want to delete \\\"\" + raid.get(\"name\") + \"\\\"?\")) {\n          raid.destroyRecord().then(function () {\n            _this.transitionTo(\"raids.index\");\n          });\n        }\n      },\n\n      seat: function (signup, role) {\n        signup.set(\"seated\", true);\n        signup.set(\"role\", role);\n        signup.save();\n      },\n\n      unseat: function (signup) {\n        signup.set(\"seated\", false);\n        signup.save();\n      },\n\n      signup: function (character, note, role_ids) {\n        var _this = this;\n        var raid = this.currentModel;\n\n        var signup = this.store.createRecord(\"signup\", {\n          character: character.get(\"model\"),\n          note: note,\n          raid: raid\n        });\n\n        Ember['default'].RSVP.all(_.map(role_ids, function (role_id) {\n          return _this.store.find(\"role\", role_id);\n        })).then(function (roles) {\n          return _.each(roles, function (role) {\n            signup.get(\"roles\").addObject(role);\n          });\n        }).then(function () {\n          signup.save();\n        });\n      },\n\n      unsignup: function (signup) {\n        signup.destroyRecord();\n      },\n\n      newPermission: function (level, key) {\n        var raid = this.currentModel;\n\n        var permission = this.store.createRecord(\"permission\", {\n          level: level,\n          key: key,\n          permissioned: raid\n        });\n\n        permission.save();\n      },\n\n      deletePermission: function (permission) {\n        permission.destroyRecord();\n      }\n    }\n  });\n\n});","define('coretheloothound/routes/raid/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      return this.modelFor(\"raid\");\n    },\n\n    setupController: function (controller, model) {\n      controller.set(\"model\", model);\n      controller.set(\"roles\", this.store.all(\"role\"));\n    }\n  });\n\n});","define('coretheloothound/routes/raids/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      return this.store.filter(\"raid\", {}, function (raid) {\n        return moment(raid.get(\"date\")).add(6, \"hours\").isAfter();\n      });\n    },\n\n    setupController: function (controller, model) {\n      controller.set(\"model\", model);\n      controller.set(\"roles\", this.store.all(\"role\"));\n    }\n  });\n\n});","define('coretheloothound/serializers/signup', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].RESTSerializer.extend({\n    attrs: {\n      roles: { serialize: \"ids\" }\n    }\n  });\n\n});","define('coretheloothound/templates/account', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h1\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),-1,-1);\n        var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n        content(env, morph0, context, \"account.battletag\");\n        content(env, morph1, context, \"liquid-outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/apikey', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"          \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createTextNode(\"\\n            Currently using API Key: \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n          content(env, morph0, context, \"apikey\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"container\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"header\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"wrapper\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"h1\");\n        var el5 = dom.createTextNode(\"Core the Loot Hound\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"footer\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"wrapper\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"section\");\n        dom.setAttribute(el4,\"class\",\"description\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"\\n          Core the Loot Hound is an \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"a\");\n        dom.setAttribute(el6,\"href\",\"http://emberjs.com/\");\n        var el7 = dom.createTextNode(\"Ember.js\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" front end to the\\n          \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"a\");\n        dom.setAttribute(el6,\"href\",\"http://byfirebepurged.com\");\n        var el7 = dom.createTextNode(\"By Fire Be Purged\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" raid scheduling API.\\n        \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"\\n          You can \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"a\");\n        dom.setAttribute(el6,\"href\",\"http://docs.coretheloothound.com\");\n        var el7 = dom.createElement(\"span\");\n        dom.setAttribute(el7,\"class\",\"octicon octicon-book\");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\" view the docs\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\", help\\n          \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"a\");\n        dom.setAttribute(el6,\"href\",\"http://code.coretheloothound.com\");\n        var el7 = dom.createElement(\"span\");\n        dom.setAttribute(el7,\"class\",\"octicon octicon-git-branch\");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\" contribute\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\", and\\n          \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"a\");\n        dom.setAttribute(el6,\"href\",\"http://issues.coretheloothound.com\");\n        var el7 = dom.createElement(\"span\");\n        dom.setAttribute(el7,\"class\",\"octicon octicon-issue-opened\");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\" open an issue\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" for any problems.\\n        \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"section\");\n        dom.setAttribute(el4,\"class\",\"copyright\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"\\n          © 2014 by Christopher Giroir <\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"a\");\n        dom.setAttribute(el6,\"href\",\"mailto:kelsin@valefor.com\");\n        var el7 = dom.createTextNode(\"kelsin@valefor.com\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\">\\n        \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, inline = hooks.inline, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]),2,3);\n        var morph1 = dom.createMorphAt(element0,2,3);\n        var morph2 = dom.createMorphAt(dom.childAt(element0, [4, 1, 1]),2,3);\n        inline(env, morph0, context, \"render\", [\"auth\"], {});\n        content(env, morph1, context, \"liquid-outlet\");\n        block(env, morph2, context, \"if\", [get(env, context, \"loggedIn\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/auth', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"fa fa-home\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\" Home\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"fa fa-trophy\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" Raids\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"fa fa-users\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" Characters\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"fa fa-user\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"class\",\"btn btn-sm btn-default\");\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"i\");\n          dom.setAttribute(el3,\"class\",\"fa fa-sign-out\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\" Logout\\n      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block, content = hooks.content, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [7, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n          var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),-1,-1);\n          var morph2 = dom.createMorphAt(dom.childAt(fragment, [5]),1,-1);\n          block(env, morph0, context, \"link-to\", [\"raids\"], {}, child0, null);\n          block(env, morph1, context, \"link-to\", [\"characters\"], {}, child1, null);\n          content(env, morph2, context, \"account.battletag\");\n          element(env, element1, context, \"action\", [\"logout\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"class\",\"btn btn-sm btn-primary\");\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"i\");\n          dom.setAttribute(el3,\"class\",\"fa fa-sign-in\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\" Login\\n      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 1]);\n          element(env, element0, context, \"action\", [\"login\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"ul\");\n        dom.setAttribute(el1,\"class\",\"auth\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"li\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),-1,-1);\n        var morph1 = dom.createMorphAt(element2,2,-1);\n        block(env, morph0, context, \"link-to\", [\"index\"], {}, child0, null);\n        block(env, morph1, context, \"if\", [get(env, context, \"loggedIn\")], {}, child1, child2);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/characters', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"characters\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h2\");\n        var el3 = dom.createTextNode(\"Characters\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),2,3);\n        content(env, morph0, context, \"liquid-outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/characters/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"character\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"h3\");\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"small\");\n          var el4 = dom.createTextNode(\" \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"img\");\n          dom.setAttribute(el2,\"class\",\"character\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"p\");\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"p\");\n          dom.setAttribute(el2,\"class\",\"links\");\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          var el4 = dom.createElement(\"img\");\n          dom.setAttribute(el4,\"src\",\"images/wow.png\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          var el4 = dom.createElement(\"img\");\n          dom.setAttribute(el4,\"src\",\"images/wowhead.png\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          var el4 = dom.createElement(\"img\");\n          dom.setAttribute(el4,\"src\",\"images/robot.png\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, element = hooks.element, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [1]);\n          var element2 = dom.childAt(element1, [1]);\n          var element3 = dom.childAt(element0, [3]);\n          var element4 = dom.childAt(element0, [5]);\n          var element5 = dom.childAt(element0, [7]);\n          var element6 = dom.childAt(element5, [1]);\n          var element7 = dom.childAt(element5, [3]);\n          var element8 = dom.childAt(element5, [5]);\n          var morph0 = dom.createMorphAt(element1,-1,0);\n          var morph1 = dom.createMorphAt(element2,-1,0);\n          var morph2 = dom.createMorphAt(element2,0,-1);\n          var morph3 = dom.createMorphAt(element4,-1,0);\n          var morph4 = dom.createMorphAt(element4,0,-1);\n          content(env, morph0, context, \"character.name\");\n          content(env, morph1, context, \"character.level\");\n          content(env, morph2, context, \"character.realm\");\n          element(env, element3, context, \"bind-attr\", [], {\"src\": \"character.image_url\"});\n          inline(env, morph3, context, \"character-race\", [get(env, context, \"character.race_id\")], {});\n          inline(env, morph4, context, \"character-class\", [get(env, context, \"character.class_id\")], {});\n          element(env, element6, context, \"bind-attr\", [], {\"href\": \"character.armoryUrl\"});\n          element(env, element7, context, \"bind-attr\", [], {\"href\": \"character.wowheadUrl\"});\n          element(env, element8, context, \"bind-attr\", [], {\"href\": \"character.robotUrl\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createTextNode(\"max level \");\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"empty\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"alert alert-info\");\n          var el3 = dom.createTextNode(\"No \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"characters\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),0,1);\n          block(env, morph0, context, \"if\", [get(env, context, \"onlyMax\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"well form\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        dom.setAttribute(el3,\"for\",\"realms\");\n        var el4 = dom.createTextNode(\"Realm\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"checkbox\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        var el4 = dom.createTextNode(\" Only show max level characters\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"characters-list\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element9 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(dom.childAt(element9, [1]),2,3);\n        var morph1 = dom.createMorphAt(dom.childAt(element9, [3, 1]),-1,0);\n        var morph2 = dom.createMorphAt(dom.childAt(fragment, [2]),0,-1);\n        inline(env, morph0, context, \"view\", [\"select\"], {\"id\": \"realms\", \"class\": \"form-control\", \"content\": get(env, context, \"realms\"), \"value\": get(env, context, \"realm\")});\n        inline(env, morph1, context, \"input\", [], {\"type\": \"checkbox\", \"checked\": get(env, context, \"onlyMax\")});\n        block(env, morph2, context, \"each\", [get(env, context, \"filtered\")], {\"itemController\": \"character\", \"keyword\": \"character\"}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/character-select', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"          \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"checkbox\");\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"label\");\n          var el3 = dom.createTextNode(\"\\n              \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n              \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 1]);\n          var morph0 = dom.createMorphAt(element0,0,1);\n          var morph1 = dom.createMorphAt(element0,1,2);\n          inline(env, morph0, context, \"input\", [], {\"id\": get(env, context, \"slug\"), \"type\": \"checkbox\", \"checked\": get(env, context, \"box.checked\"), \"name\": get(env, context, \"box.name\")});\n          content(env, morph1, context, \"box.name\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h3\");\n        var el2 = dom.createTextNode(\"Signup\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"form\");\n        dom.setAttribute(el1,\"class\",\"form\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"row\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"col-md-12\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"character\");\n        var el6 = dom.createTextNode(\"Character\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"button\");\n        dom.setAttribute(el4,\"class\",\"btn btn-primary\");\n        var el5 = dom.createTextNode(\"Sign Up\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [2, 1, 1]);\n        var element2 = dom.childAt(element1, [1]);\n        var element3 = dom.childAt(element1, [3]);\n        var morph0 = dom.createMorphAt(element2,2,3);\n        var morph1 = dom.createMorphAt(element2,3,4);\n        var morph2 = dom.createMorphAt(element2,4,5);\n        inline(env, morph0, context, \"view\", [\"select\"], {\"id\": \"character\", \"class\": \"form-control\", \"content\": get(env, context, \"characters\"), \"selection\": get(env, context, \"character\"), \"optionValuePath\": \"content.id\", \"optionLabelPath\": \"content.label\"});\n        inline(env, morph1, context, \"input\", [], {\"class\": \"form-control\", \"placeholder\": \"Note\", \"value\": get(env, context, \"note\")});\n        block(env, morph2, context, \"each\", [get(env, context, \"roleCheckboxes\")], {\"keyword\": \"box\"}, child0, null);\n        element(env, element3, context, \"action\", [\"signup\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/date-time', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"date-container row\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-3\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"input-group margin-bottom-sm\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"input-group-addon\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-calendar-o fa-fw\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-3\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"input-group margin-bottom-sm\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"input-group-addon\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-clock-o fa-fw\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-6\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]),2,3);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3, 1]),2,3);\n        var morph2 = dom.createMorphAt(dom.childAt(element0, [5, 1]),-1,-1);\n        inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"id\": \"raid-date\", \"value\": get(env, context, \"pickdate\"), \"class\": \"datepicker form-control\"});\n        inline(env, morph1, context, \"input\", [], {\"type\": \"text\", \"id\": \"raid-time\", \"value\": get(env, context, \"picktime\"), \"class\": \"timepicker form-control\"});\n        content(env, morph2, context, \"dateAgo\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/donut-graph', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h3\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"graph\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),-1,-1);\n        content(env, morph0, context, \"title\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/guild-select', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        inline(env, morph0, context, \"view\", [\"select\"], {\"content\": get(env, context, \"guilds\"), \"selection\": get(env, context, \"guild\"), \"optionValuePath\": \"content.id\", \"optionLabelPath\": \"content.fullName\", \"prompt\": \"None\", \"class\": \"form-control\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/liquid-bind-c', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          set(env, context, \"boundValue\", blockArguments[0]);\n          content(env, morph0, context, \"boundValue\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"liquid-with\", [get(env, context, \"value\")], {\"class\": get(env, context, \"innerClass\"), \"use\": get(env, context, \"use\"), \"containerless\": get(env, context, \"containerless\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/liquid-measured', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/liquid-modal', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"role\",\"dialog\");\n            var el2 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element0,0,1);\n            var morph1 = dom.createMorphAt(fragment,2,3,contextualElement);\n            element(env, element0, context, \"bind-attr\", [], {\"class\": \":lf-dialog cc.options.dialogClass\"});\n            element(env, element0, context, \"bind-attr\", [], {\"aria-labelledby\": \"cc.options.ariaLabelledBy\", \"aria-label\": \"cc.options.ariaLabel\"});\n            inline(env, morph0, context, \"view\", [get(env, context, \"innerView\")], {\"dismiss\": \"dismiss\"});\n            inline(env, morph1, context, \"lf-overlay\", [], {\"clickAway\": \"outsideClick\"});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          set(env, context, \"cc\", blockArguments[0]);\n          block(env, morph0, context, \"lm-container\", [], {\"action\": \"escape\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"liquid-with\", [get(env, context, \"currentContext\")], {\"class\": \"lm-with\", \"containerless\": true}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/liquid-spacer', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          content(env, morph0, context, \"yield\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"liquid-measured\", [], {\"width\": get(env, context, \"width\"), \"height\": get(env, context, \"height\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/raid-group', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"waiting-list\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"target\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"tank\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"target\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"healing\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"target\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"dps\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"target\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"targets\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,-1);\n        block(env, morph0, context, \"if\", [get(env, context, \"waitingList\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/raid-permission', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"a\");\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"fa fa-close fa-fw\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          element(env, element0, context, \"action\", [\"deletePermission\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,2]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n        content(env, morph0, context, \"label\");\n        block(env, morph1, context, \"unless\", [get(env, context, \"ownAccount\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/raid-permissions', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"raid-permission\", [], {\"account\": get(env, context, \"account\"), \"permission\": get(env, context, \"permission\"), \"deletePermission\": \"deletePermission\"});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"text-muted\");\n            var el2 = dom.createTextNode(\"None\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"raid-permission\", [], {\"account\": get(env, context, \"account\"), \"permission\": get(env, context, \"permission\"), \"deletePermission\": \"deletePermission\"});\n            return fragment;\n          }\n        };\n      }());\n      var child3 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"text-muted\");\n            var el2 = dom.createTextNode(\"None\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h3\");\n          var el2 = dom.createTextNode(\"Permissions\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h4\");\n          var el2 = dom.createTextNode(\"Admins\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"form\");\n          dom.setAttribute(el1,\"class\",\"form\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"row\");\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"col-md-12\");\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"form-group\");\n          var el5 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"button\");\n          dom.setAttribute(el4,\"class\",\"btn btn-primary\");\n          var el5 = dom.createTextNode(\"Add Admin\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h4\");\n          var el2 = dom.createTextNode(\"Members\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"form\");\n          dom.setAttribute(el1,\"class\",\"form\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"row\");\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"col-md-12\");\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"form-group\");\n          var el5 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"label\");\n          var el6 = dom.createTextNode(\"Battletag\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"button\");\n          dom.setAttribute(el4,\"class\",\"btn btn-primary\");\n          var el5 = dom.createTextNode(\"Add Member Battletag\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"form\");\n          dom.setAttribute(el1,\"class\",\"form\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"row\");\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"col-md-12\");\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"form-group\");\n          var el5 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"label\");\n          var el6 = dom.createTextNode(\"Character\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"button\");\n          dom.setAttribute(el4,\"class\",\"btn btn-primary\");\n          var el5 = dom.createTextNode(\"Add Member Character\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"form\");\n          dom.setAttribute(el1,\"class\",\"form\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"row\");\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"col-md-12\");\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"form-group\");\n          var el5 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"label\");\n          var el6 = dom.createTextNode(\"Guild\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"button\");\n          dom.setAttribute(el4,\"class\",\"btn btn-primary\");\n          var el5 = dom.createTextNode(\"Add Member Guild\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [6, 1, 1]);\n          var element1 = dom.childAt(element0, [3]);\n          var element2 = dom.childAt(fragment, [11, 1, 1]);\n          var element3 = dom.childAt(element2, [3]);\n          var element4 = dom.childAt(fragment, [13, 1, 1]);\n          var element5 = dom.childAt(element4, [1]);\n          var element6 = dom.childAt(element4, [3]);\n          var element7 = dom.childAt(fragment, [15, 1, 1]);\n          var element8 = dom.childAt(element7, [1]);\n          var element9 = dom.childAt(element7, [3]);\n          var morph0 = dom.createMorphAt(fragment,4,5,contextualElement);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [1]),0,1);\n          var morph2 = dom.createMorphAt(fragment,9,10,contextualElement);\n          var morph3 = dom.createMorphAt(dom.childAt(element2, [1]),2,3);\n          var morph4 = dom.createMorphAt(element5,2,3);\n          var morph5 = dom.createMorphAt(element5,3,4);\n          var morph6 = dom.createMorphAt(element8,2,3);\n          var morph7 = dom.createMorphAt(element8,3,4);\n          block(env, morph0, context, \"each\", [get(env, context, \"adminPermissions\")], {\"keyword\": \"permission\"}, child0, child1);\n          inline(env, morph1, context, \"input\", [], {\"class\": \"form-control\", \"placeholder\": \"Battletag#9999\", \"value\": get(env, context, \"adminAccount\")});\n          element(env, element1, context, \"action\", [\"newAdminPermission\"], {});\n          block(env, morph2, context, \"each\", [get(env, context, \"memberPermissions\")], {\"keyword\": \"permission\"}, child2, child3);\n          inline(env, morph3, context, \"input\", [], {\"class\": \"form-control\", \"placeholder\": \"Battletag#9999\", \"value\": get(env, context, \"memberAccount\")});\n          element(env, element3, context, \"action\", [\"newMemberAccountPermission\"], {});\n          inline(env, morph4, context, \"input\", [], {\"class\": \"form-control\", \"placeholder\": \"Character Name\", \"value\": get(env, context, \"characterName\")});\n          inline(env, morph5, context, \"input\", [], {\"class\": \"form-control\", \"placeholder\": \"Character Realm\", \"value\": get(env, context, \"characterRealm\")});\n          element(env, element6, context, \"action\", [\"newMemberCharacterPermission\"], {});\n          inline(env, morph6, context, \"input\", [], {\"class\": \"form-control\", \"placeholder\": \"Guild Name\", \"value\": get(env, context, \"guildName\")});\n          inline(env, morph7, context, \"input\", [], {\"class\": \"form-control\", \"placeholder\": \"Guild Realm\", \"value\": get(env, context, \"guildRealm\")});\n          element(env, element9, context, \"action\", [\"newMemberGuildPermission\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"if\", [get(env, context, \"raid.admin\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/components/raid-signup', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"i\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element6 = dom.childAt(fragment, [1]);\n          element(env, element6, context, \"bind-attr\", [], {\"class\": \"iconClasses\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"a\");\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"fa fa-arrow-circle-left fa-fw\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element3 = dom.childAt(fragment, [1]);\n            element(env, element3, context, \"action\", [\"unseat\"], {});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"a\");\n                var el2 = dom.createElement(\"i\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, element = hooks.element;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element1 = dom.childAt(fragment, [1]);\n                var element2 = dom.childAt(element1, [0]);\n                element(env, element1, context, \"action\", [\"seat\", get(env, context, \"role\")], {});\n                element(env, element2, context, \"bind-attr\", [], {\"class\": \"role.iconClasses\"});\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              block(env, morph0, context, \"each\", [get(env, context, \"sortedRoles\")], {\"keyword\": \"role\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"if\", [get(env, context, \"signup.canBeSeated\")], {}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.setAttribute(el1,\"class\",\"seat pull-right\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"a\");\n          var el3 = dom.createElement(\"i\");\n          dom.setAttribute(el3,\"class\",\"fa fa-close fa-fw\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element4 = dom.childAt(fragment, [1]);\n          var element5 = dom.childAt(element4, [2]);\n          var morph0 = dom.createMorphAt(element4,0,1);\n          block(env, morph0, context, \"if\", [get(env, context, \"signup.seated\")], {}, child0, child1);\n          element(env, element5, context, \"action\", [\"unsignup\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"a\");\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"fa fa-close fa-fw\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            element(env, element0, context, \"action\", [\"unsignup\"], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"mine\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"span\");\n        var el2 = dom.createTextNode(\" \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"small\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,3]); }\n        var element7 = dom.childAt(fragment, [1]);\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        var morph1 = dom.createMorphAt(element7,-1,0);\n        var morph2 = dom.createMorphAt(dom.childAt(element7, [1]),-1,-1);\n        var morph3 = dom.createMorphAt(fragment,2,3,contextualElement);\n        block(env, morph0, context, \"if\", [get(env, context, \"signup.seated\")], {}, child0, null);\n        element(env, element7, context, \"bind-attr\", [], {\"class\": get(env, context, \"classes\")});\n        content(env, morph1, context, \"signup.character.name\");\n        content(env, morph2, context, \"signup.character.item_level\");\n        block(env, morph3, context, \"if\", [get(env, context, \"signup.raid.admin\")], {}, child1, child2);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/liquid-with-self', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"value\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/liquid-with', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"with-apply\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/raid', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"alert alert-success\");\n          dom.setAttribute(el1,\"role\",\"alert\");\n          var el2 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"strong\");\n          var el3 = dom.createTextNode(\"Seated\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n          on \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\". See you at the raid!\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),2,3);\n          content(env, morph0, context, \"currentAccountSeated.character.name\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"          \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"alert alert-info\");\n            dom.setAttribute(el1,\"role\",\"alert\");\n            var el2 = dom.createTextNode(\"\\n            You have \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" characters on the \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"strong\");\n            var el3 = dom.createTextNode(\"Waiting List\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\".\\n          \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n            content(env, morph0, context, \"currentAccountSignedUp.length\");\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"          \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"alert alert-danger\");\n            dom.setAttribute(el1,\"role\",\"alert\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"strong\");\n            var el3 = dom.createTextNode(\"Not Signed Up!\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            Sign up using the form below!\\n          \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"currentAccountSignedUp\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"alert alert-danger\");\n          dom.setAttribute(el1,\"role\",\"alert\");\n          var el2 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"strong\");\n          var el3 = dom.createTextNode(\"Raid is not yet finalized!\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n          You will not be able to see the seating arrangement until the raid is finalized.\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"raid\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"title\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h1\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"stats\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"title\",\"Seated accounts\");\n        dom.setAttribute(el4,\"class\",\"stat\");\n        var el5 = dom.createTextNode(\" \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-check fa-fw\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"title\",\"Accounts on the waiting list\");\n        dom.setAttribute(el4,\"class\",\"stat\");\n        var el5 = dom.createTextNode(\" \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-bars fa-fw\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"title\",\"Accounts signed up\");\n        dom.setAttribute(el4,\"class\",\"stat\");\n        var el5 = dom.createTextNode(\" \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-users fa-fw\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"alerts\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"wrapper\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element1, [3]);\n        var element3 = dom.childAt(element0, [3, 1]);\n        if (this.cachedFragment) { dom.repairClonedNode(element3,[1]); }\n        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),-1,-1);\n        var morph1 = dom.createMorphAt(dom.childAt(element2, [1]),-1,0);\n        var morph2 = dom.createMorphAt(dom.childAt(element2, [3]),-1,0);\n        var morph3 = dom.createMorphAt(dom.childAt(element2, [5]),-1,0);\n        var morph4 = dom.createMorphAt(element3,0,1);\n        var morph5 = dom.createMorphAt(element3,1,2);\n        var morph6 = dom.createMorphAt(element0,4,5);\n        content(env, morph0, context, \"name\");\n        content(env, morph1, context, \"accountSeated\");\n        content(env, morph2, context, \"accountWaitingList\");\n        content(env, morph3, context, \"accountSignups\");\n        block(env, morph4, context, \"if\", [get(env, context, \"currentAccountSeated\")], {}, child0, child1);\n        block(env, morph5, context, \"if\", [get(env, context, \"hiddenAndNotFinalized\")], {}, child2, null);\n        content(env, morph6, context, \"liquid-outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/raid/edit', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"p\");\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"fa fa-lock fa-fw\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"a\");\n            var el3 = dom.createTextNode(\"Finalized\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element2 = dom.childAt(fragment, [1, 2]);\n            element(env, element2, context, \"action\", [\"unfinalize\"], {});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"p\");\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"fa fa-unlock fa-fw\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"a\");\n            var el3 = dom.createTextNode(\"Not Finalized\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element1 = dom.childAt(fragment, [1, 2]);\n            element(env, element1, context, \"action\", [\"finalize\"], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"fa fa-eye-slash fa-fw\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"a\");\n          var el3 = dom.createTextNode(\"Hidden\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n          var element3 = dom.childAt(fragment, [2, 2]);\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"finalized\")], {}, child0, child1);\n          element(env, element3, context, \"action\", [\"unhide\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"fa fa-eye fa-fw\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"a\");\n          var el3 = dom.createTextNode(\"Visible\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 2]);\n          element(env, element0, context, \"action\", [\"hide\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"Back\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createElement(\"p\");\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"fa fa-file-text-o fa-fw\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\" \");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,-1);\n          content(env, morph0, context, \"note\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"raid-wrapper\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"info\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"fa fa-calendar fa-fw\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"small\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"fa fa-users fa-fw\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"fa fa-trash-o fa-fw\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        var el5 = dom.createTextNode(\"Delete\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"fa fa-arrow-left fa-fw\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"signups\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, element = hooks.element, block = hooks.block, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element4 = dom.childAt(fragment, [0]);\n        var element5 = dom.childAt(element4, [1]);\n        var element6 = dom.childAt(element5, [1]);\n        var element7 = dom.childAt(element5, [3, 2]);\n        var element8 = dom.childAt(element5, [6, 2]);\n        var morph0 = dom.createMorphAt(element6,1,2);\n        var morph1 = dom.createMorphAt(dom.childAt(element6, [3]),-1,-1);\n        var morph2 = dom.createMorphAt(element7,-1,-1);\n        var morph3 = dom.createMorphAt(element5,4,5);\n        var morph4 = dom.createMorphAt(dom.childAt(element5, [8]),1,-1);\n        var morph5 = dom.createMorphAt(element5,9,10);\n        var morph6 = dom.createMorphAt(dom.childAt(element4, [3]),0,1);\n        content(env, morph0, context, \"dateCalendar\");\n        content(env, morph1, context, \"dateAgo\");\n        element(env, element7, context, \"bind-attr\", [], {\"href\": get(env, context, \"guild.url\")});\n        content(env, morph2, context, \"guild.name\");\n        block(env, morph3, context, \"if\", [get(env, context, \"hidden\")], {}, child0, child1);\n        element(env, element8, context, \"action\", [\"delete\"], {});\n        block(env, morph4, context, \"link-to\", [\"raid.index\", get(env, context, \"this\")], {}, child2, null);\n        block(env, morph5, context, \"if\", [get(env, context, \"note\")], {}, child3, null);\n        inline(env, morph6, context, \"raid-permissions\", [], {\"raid\": get(env, context, \"this\"), \"account\": get(env, context, \"account\"), \"newPermission\": \"newPermission\", \"deletePermission\": \"deletePermission\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/raid/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"p\");\n              var el2 = dom.createElement(\"i\");\n              dom.setAttribute(el2,\"class\",\"fa fa-lock fa-fw\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\" \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"a\");\n              var el3 = dom.createTextNode(\"Finalized\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element5 = dom.childAt(fragment, [1, 2]);\n              element(env, element5, context, \"action\", [\"unfinalize\"], {});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"p\");\n              var el2 = dom.createElement(\"i\");\n              dom.setAttribute(el2,\"class\",\"fa fa-unlock fa-fw\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\" \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"a\");\n              var el3 = dom.createTextNode(\"Not Finalized\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element4 = dom.childAt(fragment, [1, 2]);\n              element(env, element4, context, \"action\", [\"finalize\"], {});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"p\");\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"fa fa-eye-slash fa-fw\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"a\");\n            var el3 = dom.createTextNode(\"Hidden\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n            var element6 = dom.childAt(fragment, [2, 2]);\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"if\", [get(env, context, \"finalized\")], {}, child0, child1);\n            element(env, element6, context, \"action\", [\"unhide\"], {});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"p\");\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"fa fa-eye fa-fw\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"a\");\n            var el3 = dom.createTextNode(\"Visible\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element3 = dom.childAt(fragment, [1, 2]);\n            element(env, element3, context, \"action\", [\"hide\"], {});\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createTextNode(\"Edit\");\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"fa fa-legal fa-fw\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" You're an admin\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"fa fa-pencil fa-fw\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          var morph1 = dom.createMorphAt(dom.childAt(fragment, [4]),1,-1);\n          block(env, morph0, context, \"if\", [get(env, context, \"hidden\")], {}, child0, child1);\n          block(env, morph1, context, \"link-to\", [\"raid.edit\", get(env, context, \"this\")], {}, child2, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"p\");\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"fa fa-lock fa-fw\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" Finalized\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"p\");\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"fa fa-unlock fa-fw\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" Not Finalized\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"finalized\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createElement(\"p\");\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"fa fa-file-text-o fa-fw\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\" \");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,-1);\n          content(env, morph0, context, \"note\");\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"          \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"raid-signup\", [], {\"signup\": get(env, context, \"signup\"), \"currentAccount\": get(env, context, \"currentAccount\"), \"seat\": \"seat\", \"unseat\": \"unseat\", \"unsignup\": \"unsignup\"});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"          \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h4\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[3]); }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n          var morph1 = dom.createMorphAt(fragment,2,3,contextualElement);\n          content(env, morph0, context, \"waitingListAccount.account.battletag\");\n          block(env, morph1, context, \"each\", [get(env, context, \"waitingListAccount.signups\")], {\"itemController\": \"signup\", \"keyword\": \"signup\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child4 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"          \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"raid-signup\", [], {\"signup\": get(env, context, \"signup\"), \"currentAccount\": get(env, context, \"currentAccount\"), \"seat\": \"seat\", \"unseat\": \"unseat\", \"unsignup\": \"unsignup\"});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"signup-wrapper\");\n          var el2 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"h3\");\n          var el3 = dom.createElement(\"i\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"small\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, content = hooks.content, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [1]);\n          var element2 = dom.childAt(element1, [0]);\n          var morph0 = dom.createMorphAt(dom.childAt(element1, [2]),-1,-1);\n          var morph1 = dom.createMorphAt(element0,2,3);\n          element(env, element2, context, \"bind-attr\", [], {\"class\": \"seatedRole.role.iconClasses\"});\n          content(env, morph0, context, \"seatedRole.role.name\");\n          block(env, morph1, context, \"each\", [get(env, context, \"seatedRole.signups\")], {\"itemController\": \"signup\", \"keyword\": \"signup\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"raid-wrapper\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"info\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"fa fa-calendar fa-fw\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"small\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"fa fa-users fa-fw\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"signups\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"wrapper\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"signup-wrapper waiting-list\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"h3\");\n        var el6 = dom.createElement(\"i\");\n        dom.setAttribute(el6,\"class\",\"fa fa-clock-o fa-fw\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"small\");\n        var el7 = dom.createTextNode(\"Waiting List\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, element = hooks.element, block = hooks.block, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element7 = dom.childAt(fragment, [0]);\n        var element8 = dom.childAt(element7, [1]);\n        var element9 = dom.childAt(element8, [1]);\n        var element10 = dom.childAt(element8, [3, 2]);\n        var element11 = dom.childAt(element7, [3, 1]);\n        var morph0 = dom.createMorphAt(element9,1,2);\n        var morph1 = dom.createMorphAt(dom.childAt(element9, [3]),-1,-1);\n        var morph2 = dom.createMorphAt(element10,-1,-1);\n        var morph3 = dom.createMorphAt(element8,4,5);\n        var morph4 = dom.createMorphAt(element8,5,6);\n        var morph5 = dom.createMorphAt(element8,6,7);\n        var morph6 = dom.createMorphAt(dom.childAt(element11, [1]),2,3);\n        var morph7 = dom.createMorphAt(element11,2,3);\n        content(env, morph0, context, \"dateCalendar\");\n        content(env, morph1, context, \"dateAgo\");\n        element(env, element10, context, \"bind-attr\", [], {\"href\": get(env, context, \"guild.url\")});\n        content(env, morph2, context, \"guild.name\");\n        block(env, morph3, context, \"if\", [get(env, context, \"admin\")], {}, child0, child1);\n        block(env, morph4, context, \"if\", [get(env, context, \"note\")], {}, child2, null);\n        inline(env, morph5, context, \"character-select\", [], {\"characters\": get(env, context, \"characters\"), \"action\": \"signup\"});\n        block(env, morph6, context, \"each\", [get(env, context, \"waitingListByAccount\")], {\"keyword\": \"waitingListAccount\"}, child3, null);\n        block(env, morph7, context, \"each\", [get(env, context, \"seatedByRole\")], {\"keyword\": \"seatedRole\"}, child4, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/raids', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"raids\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h2\");\n        var el3 = dom.createTextNode(\"Raids\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),2,3);\n        content(env, morph0, context, \"liquid-outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/raids/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"fa fa-plus\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\" New Raid\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"              \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"emblem\");\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"background\");\n              var el3 = dom.createTextNode(\"\\n                  \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createElement(\"div\");\n              dom.setAttribute(el3,\"class\",\"icon\");\n              var el4 = dom.createTextNode(\"\\n                  \");\n              dom.appendChild(el3, el4);\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n              \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1, 1]);\n              var element1 = dom.childAt(element0, [1]);\n              element(env, element0, context, \"bind-attr\", [], {\"style\": \"raid.guild.backgroundStyle\"});\n              element(env, element1, context, \"bind-attr\", [], {\"style\": \"raid.guild.iconStyle\"});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"br\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"small\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n            var morph2 = dom.createMorphAt(dom.childAt(fragment, [3]),-1,-1);\n            block(env, morph0, context, \"if\", [get(env, context, \"raid.guild.icon\")], {}, child0, null);\n            content(env, morph1, context, \"raid.guild.name\");\n            content(env, morph2, context, \"raid.guild.realm\");\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"title\",\"You're an admin\");\n            dom.setAttribute(el1,\"class\",\"fa fa-legal fa-fw\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" \\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              content(env, morph0, context, \"raid.name\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"link-to\", [\"raid\", get(env, context, \"raid.id\")], {\"data-content\": get(env, context, \"raid.note\"), \"data-toggle\": \"popover\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child3 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              content(env, morph0, context, \"raid.name\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"link-to\", [\"raid\", get(env, context, \"raid.id\")], {}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child4 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"strong\");\n            dom.setAttribute(el1,\"class\",\"text-success\");\n            var el2 = dom.createTextNode(\"Seated on \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n            content(env, morph0, context, \"raid.currentAccountSeated.character.name\");\n            return fragment;\n          }\n        };\n      }());\n      var child5 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"              \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"strong\");\n              dom.setAttribute(el1,\"class\",\"text-info\");\n              var el2 = dom.createTextNode(\"Signed Up\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"              \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"strong\");\n              dom.setAttribute(el1,\"class\",\"text-danger\");\n              var el2 = dom.createTextNode(\"Not Signed Up!\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"          \");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"if\", [get(env, context, \"raid.currentAccountSignedUp\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      var child6 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"i\");\n              dom.setAttribute(el1,\"class\",\"fa fa-lock fa-fw\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\" Finalized\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"i\");\n              dom.setAttribute(el1,\"class\",\"fa fa-unlock fa-fw\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\" Not Finalized\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"if\", [get(env, context, \"raid.finalized\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"tr\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"td\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"td\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"td\");\n          var el3 = dom.createElement(\"i\");\n          dom.setAttribute(el3,\"class\",\"fa fa-calendar\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"br\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"small\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"td\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"br\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"small\");\n          var el4 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"          \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"td\");\n          var el3 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"span\");\n          dom.setAttribute(el3,\"title\",\"Accounts signed up\");\n          var el4 = dom.createTextNode(\" \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"i\");\n          dom.setAttribute(el4,\"class\",\"fa fa-users fa-fw\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"   \\n          \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"span\");\n          dom.setAttribute(el3,\"title\",\"Accounts on the waiting list\");\n          var el4 = dom.createTextNode(\" \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"i\");\n          dom.setAttribute(el4,\"class\",\"fa fa-bars fa-fw\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"   \\n          \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"span\");\n          dom.setAttribute(el3,\"title\",\"Seated accounts\");\n          var el4 = dom.createTextNode(\" \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"i\");\n          dom.setAttribute(el4,\"class\",\"fa fa-check fa-fw\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"   \\n        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element2 = dom.childAt(fragment, [1]);\n          var element3 = dom.childAt(element2, [3]);\n          if (this.cachedFragment) { dom.repairClonedNode(element3,[1]); }\n          var element4 = dom.childAt(element2, [5]);\n          var element5 = dom.childAt(element2, [7]);\n          var element6 = dom.childAt(element2, [9]);\n          var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),0,1);\n          var morph1 = dom.createMorphAt(element3,0,1);\n          var morph2 = dom.createMorphAt(element3,1,2);\n          var morph3 = dom.createMorphAt(element4,1,2);\n          var morph4 = dom.createMorphAt(dom.childAt(element4, [3]),-1,-1);\n          var morph5 = dom.createMorphAt(element5,0,1);\n          var morph6 = dom.createMorphAt(dom.childAt(element5, [3]),0,1);\n          var morph7 = dom.createMorphAt(dom.childAt(element6, [1]),-1,0);\n          var morph8 = dom.createMorphAt(dom.childAt(element6, [3]),-1,0);\n          var morph9 = dom.createMorphAt(dom.childAt(element6, [5]),-1,0);\n          block(env, morph0, context, \"if\", [get(env, context, \"raid.guild\")], {}, child0, null);\n          block(env, morph1, context, \"if\", [get(env, context, \"raid.admin\")], {}, child1, null);\n          block(env, morph2, context, \"if\", [get(env, context, \"raid.note\")], {}, child2, child3);\n          content(env, morph3, context, \"raid.dateCalendar\");\n          content(env, morph4, context, \"raid.dateAgo\");\n          block(env, morph5, context, \"if\", [get(env, context, \"raid.currentAccountSeated\")], {}, child4, child5);\n          block(env, morph6, context, \"if\", [get(env, context, \"raid.hidden\")], {}, child6, null);\n          content(env, morph7, context, \"raid.accountSignups\");\n          content(env, morph8, context, \"raid.accountWaitingList\");\n          content(env, morph9, context, \"raid.accountSeated\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"table\");\n        dom.setAttribute(el1,\"class\",\"table\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"thead\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"tr\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"Guild\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"Title\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"Date\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"You\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"Signups\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"tbody\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2, 3]),0,1);\n        block(env, morph0, context, \"link-to\", [\"raids.new\"], {\"class\": \"btn btn-primary\"}, child0, null);\n        block(env, morph1, context, \"each\", [get(env, context, \"controller\")], {\"keyword\": \"raid\"}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/raids/new', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"form\");\n        dom.setAttribute(el1,\"class\",\"form\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        dom.setAttribute(el3,\"for\",\"raid-name\");\n        var el4 = dom.createTextNode(\"Name\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"row\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"col-md-6\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        dom.setAttribute(el3,\"for\",\"raid-name\");\n        var el4 = dom.createTextNode(\"Guild\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"row\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"col-md-6\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"row\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"col-md-6\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"checkbox\");\n        var el6 = dom.createTextNode(\"\\n          \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"label\");\n        var el7 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\" Hidden\\n          \");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        dom.setAttribute(el3,\"for\",\"raid-name\");\n        var el4 = dom.createTextNode(\"Date\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"class\",\"btn btn-primary\");\n        var el3 = dom.createTextNode(\"Create\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [9]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 3, 1]),0,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3, 3, 1]),0,1);\n        var morph2 = dom.createMorphAt(dom.childAt(element0, [5, 1, 1, 1, 1]),0,1);\n        var morph3 = dom.createMorphAt(dom.childAt(element0, [7]),2,3);\n        inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"id\": \"raid-name\", \"value\": get(env, context, \"name\"), \"class\": \"form-control\", \"placeholder\": \"Name\"});\n        inline(env, morph1, context, \"guild-select\", [], {\"account\": get(env, context, \"account\"), \"guild\": get(env, context, \"guild\")});\n        inline(env, morph2, context, \"input\", [], {\"type\": \"checkbox\", \"id\": \"raid-hidden\", \"checked\": get(env, context, \"hidden\"), \"class\": \"form-control\"});\n        inline(env, morph3, context, \"date-time\", [], {\"date\": get(env, context, \"date\")});\n        element(env, element1, context, \"action\", [\"create\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/templates/user', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"character\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"h3\");\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"small\");\n          var el4 = dom.createTextNode(\" \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"img\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"p\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"p\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"p\");\n          var el3 = dom.createElement(\"span\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, element = hooks.element, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [1]);\n          var element2 = dom.childAt(element1, [1]);\n          var element3 = dom.childAt(element0, [3]);\n          var element4 = dom.childAt(element0, [9, 0]);\n          var morph0 = dom.createMorphAt(element1,-1,0);\n          var morph1 = dom.createMorphAt(element2,-1,0);\n          var morph2 = dom.createMorphAt(element2,0,-1);\n          var morph3 = dom.createMorphAt(dom.childAt(element0, [5]),-1,-1);\n          var morph4 = dom.createMorphAt(dom.childAt(element0, [7]),-1,-1);\n          var morph5 = dom.createMorphAt(element4,-1,-1);\n          content(env, morph0, context, \"character.name\");\n          content(env, morph1, context, \"character.level\");\n          content(env, morph2, context, \"character.realm\");\n          element(env, element3, context, \"bind-attr\", [], {\"src\": \"character.image_url\"});\n          inline(env, morph3, context, \"class\", [get(env, context, \"character.class\")], {});\n          content(env, morph4, context, \"character.spec.name\");\n          element(env, element4, context, \"bind-attr\", [], {\"class\": \"character.faction character.race\"});\n          inline(env, morph5, context, \"race\", [get(env, context, \"character.race\")], {});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createTextNode(\"Max Level \");\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"alert alert-info\");\n          var el2 = dom.createTextNode(\"No \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"Characters\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n          block(env, morph0, context, \"if\", [get(env, context, \"onlyMax\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h1\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"dl\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"dt\");\n        var el3 = dom.createTextNode(\"By Fire Be Purged API Key\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"dd\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"characters\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h2\");\n        var el3 = dom.createTextNode(\"Characters\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"well form-inline\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"col-xs-2\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"label\");\n        dom.setAttribute(el4,\"for\",\"realms\");\n        var el5 = dom.createTextNode(\"Realm\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"checkbox col-xs-4\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"label\");\n        dom.setAttribute(el4,\"class\",\"checkbox-inline\");\n        var el5 = dom.createTextNode(\" Only show level 90 characters\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, inline = hooks.inline, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element5 = dom.childAt(fragment, [4]);\n        var element6 = dom.childAt(element5, [3]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),-1,-1);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2, 3]),-1,-1);\n        var morph2 = dom.createMorphAt(dom.childAt(element6, [1]),2,3);\n        var morph3 = dom.createMorphAt(dom.childAt(element6, [3, 1]),-1,0);\n        var morph4 = dom.createMorphAt(element5,4,-1);\n        content(env, morph0, context, \"user.battle_tag\");\n        content(env, morph1, context, \"session.apikey\");\n        inline(env, morph2, context, \"view\", [get(env, context, \"Ember.Select\")], {\"id\": \"realms\", \"content\": get(env, context, \"realms\"), \"value\": get(env, context, \"realm\")});\n        inline(env, morph3, context, \"input\", [], {\"type\": \"checkbox\", \"checked\": get(env, context, \"onlyMax\")});\n        block(env, morph4, context, \"each\", [get(env, context, \"characters\")], {\"keyword\": \"character\"}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('coretheloothound/tests/adapters/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - adapters');\n  test('adapters/application.js should pass jshint', function() { \n    ok(true, 'adapters/application.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/components/character-select.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/character-select.js should pass jshint', function() { \n    ok(true, 'components/character-select.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/components/date-time.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/date-time.js should pass jshint', function() { \n    ok(true, 'components/date-time.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/components/donut-graph.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/donut-graph.js should pass jshint', function() { \n    ok(true, 'components/donut-graph.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/components/guild-select.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/guild-select.js should pass jshint', function() { \n    ok(true, 'components/guild-select.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/components/raid-group.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/raid-group.js should pass jshint', function() { \n    ok(true, 'components/raid-group.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/components/raid-permission.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/raid-permission.js should pass jshint', function() { \n    ok(true, 'components/raid-permission.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/components/raid-permissions.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/raid-permissions.js should pass jshint', function() { \n    ok(true, 'components/raid-permissions.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/components/raid-signup.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/raid-signup.js should pass jshint', function() { \n    ok(true, 'components/raid-signup.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/account.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/account.js should pass jshint', function() { \n    ok(true, 'controllers/account.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/application.js should pass jshint', function() { \n    ok(true, 'controllers/application.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/auth.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/auth.js should pass jshint', function() { \n    ok(true, 'controllers/auth.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/character.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/character.js should pass jshint', function() { \n    ok(true, 'controllers/character.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/characters/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/characters');\n  test('controllers/characters/index.js should pass jshint', function() { \n    ok(true, 'controllers/characters/index.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/raid.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/raid.js should pass jshint', function() { \n    ok(true, 'controllers/raid.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/raid/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/raid');\n  test('controllers/raid/index.js should pass jshint', function() { \n    ok(true, 'controllers/raid/index.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/raids/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/raids');\n  test('controllers/raids/index.js should pass jshint', function() { \n    ok(true, 'controllers/raids/index.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/raids/new.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/raids');\n  test('controllers/raids/new.js should pass jshint', function() { \n    ok(true, 'controllers/raids/new.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/role.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/role.js should pass jshint', function() { \n    ok(true, 'controllers/role.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/controllers/signup.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/signup.js should pass jshint', function() { \n    ok(true, 'controllers/signup.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/helpers/character-class.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/character-class.js should pass jshint', function() { \n    ok(true, 'helpers/character-class.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/helpers/character-faction.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/character-faction.js should pass jshint', function() { \n    ok(true, 'helpers/character-faction.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/helpers/character-race.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/character-race.js should pass jshint', function() { \n    ok(true, 'helpers/character-race.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/helpers/resolver', ['exports', 'ember/resolver', 'coretheloothound/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('coretheloothound/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/helpers/start-app', ['exports', 'ember', 'coretheloothound/app', 'coretheloothound/router', 'coretheloothound/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('coretheloothound/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/initializers/link-view.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/link-view.js should pass jshint', function() { \n    ok(true, 'initializers/link-view.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/initializers/storage.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/storage.js should pass jshint', function() { \n    ok(true, 'initializers/storage.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/mixins/after-render.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/after-render.js should pass jshint', function() { \n    ok(true, 'mixins/after-render.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/models/account.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/account.js should pass jshint', function() { \n    ok(true, 'models/account.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/models/character.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/character.js should pass jshint', function() { \n    ok(true, 'models/character.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/models/guild.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/guild.js should pass jshint', function() { \n    ok(true, 'models/guild.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/models/permission.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/permission.js should pass jshint', function() { \n    ok(true, 'models/permission.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/models/permissioned.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/permissioned.js should pass jshint', function() { \n    ok(true, 'models/permissioned.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/models/raid.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/raid.js should pass jshint', function() { \n    ok(true, 'models/raid.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/models/role.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/role.js should pass jshint', function() { \n    ok(true, 'models/role.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/models/signup.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/signup.js should pass jshint', function() { \n    ok(true, 'models/signup.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/models/storage.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/storage.js should pass jshint', function() { \n    ok(true, 'models/storage.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/routes/apikey.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/apikey.js should pass jshint', function() { \n    ok(true, 'routes/apikey.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/routes/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/application.js should pass jshint', function() { \n    ok(true, 'routes/application.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/routes/characters/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/characters');\n  test('routes/characters/index.js should pass jshint', function() { \n    ok(true, 'routes/characters/index.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/routes/raid.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/raid.js should pass jshint', function() { \n    ok(true, 'routes/raid.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/routes/raid/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/raid');\n  test('routes/raid/index.js should pass jshint', function() { \n    ok(true, 'routes/raid/index.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/routes/raids/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/raids');\n  test('routes/raids/index.js should pass jshint', function() { \n    ok(true, 'routes/raids/index.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/serializers/signup.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - serializers');\n  test('serializers/signup.js should pass jshint', function() { \n    ok(true, 'serializers/signup.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/test-helper', ['coretheloothound/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('coretheloothound/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/transitions.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('transitions.js should pass jshint', function() { \n    ok(true, 'transitions.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/adapters/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"adapter:application\", \"ApplicationAdapter\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var adapter = this.subject();\n    ok(adapter);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['serializer:foo']\n\n});","define('coretheloothound/tests/unit/adapters/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/adapters');\n  test('unit/adapters/application-test.js should pass jshint', function() { \n    ok(true, 'unit/adapters/application-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/components/character-select-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"character-select\", \"CharacterSelectComponent\", {});\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject({\n      characters: []\n    });\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n  // specify the other units that are required for this test\n  // needs: ['view:select']\n\n});","define('coretheloothound/tests/unit/components/character-select-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/character-select-test.js should pass jshint', function() { \n    ok(true, 'unit/components/character-select-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/components/date-time-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"date-time\", \"DateTimeComponent\", {});\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('coretheloothound/tests/unit/components/date-time-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/date-time-test.js should pass jshint', function() { \n    ok(true, 'unit/components/date-time-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/components/donut-graph-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"donut-graph\", \"DonutGraphComponent\", {});\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject({\n      data: {}\n    });\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('coretheloothound/tests/unit/components/donut-graph-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/donut-graph-test.js should pass jshint', function() { \n    ok(true, 'unit/components/donut-graph-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/components/guild-select-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"guild-select\", \"GuildSelectComponent\", {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n    needs: [\"controller:application\"]\n  });\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n\n});","define('coretheloothound/tests/unit/components/guild-select-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/guild-select-test.js should pass jshint', function() { \n    ok(true, 'unit/components/guild-select-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/components/raid-group-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"raid-group\", {});\n\n  ember_qunit.test(\"it renders\", function (assert) {\n    assert.expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, \"preRender\");\n\n    // renders the component to the page\n    this.render();\n    assert.equal(component._state, \"inDOM\");\n  });\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('coretheloothound/tests/unit/components/raid-group-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/raid-group-test.js should pass jshint', function() { \n    ok(true, 'unit/components/raid-group-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/components/raid-permission-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"raid-permission\", \"RaidPermissionComponent\", {});\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('coretheloothound/tests/unit/components/raid-permission-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/raid-permission-test.js should pass jshint', function() { \n    ok(true, 'unit/components/raid-permission-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/components/raid-permissions-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"raid-permissions\", \"RaidPermissionsComponent\", {});\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('coretheloothound/tests/unit/components/raid-permissions-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/raid-permissions-test.js should pass jshint', function() { \n    ok(true, 'unit/components/raid-permissions-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/components/raid-signup-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"raid-signup\", \"RaidSignupComponent\", {\n    // specify the other units that are required for this test\n    needs: [\"controller:role\"]\n  });\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n\n});","define('coretheloothound/tests/unit/components/raid-signup-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/raid-signup-test.js should pass jshint', function() { \n    ok(true, 'unit/components/raid-signup-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/controllers/account-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:account\", \"AccountController\", {\n    // Specify the other units that are required for this test.\n    needs: [\"controller:application\"]\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('coretheloothound/tests/unit/controllers/account-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/account-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/account-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/controllers/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:application\", \"ApplicationController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/controllers/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/application-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/application-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/controllers/auth-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:auth\", \"AuthController\", {\n    // Specify the other units that are required for this test.\n    needs: [\"controller:application\"]\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('coretheloothound/tests/unit/controllers/auth-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/auth-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/auth-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/controllers/character-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:character\", \"CharacterController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/controllers/character-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/character-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/character-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/controllers/characters/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:characters/index\", \"CharactersIndexController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/controllers/characters/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers/characters');\n  test('unit/controllers/characters/index-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/characters/index-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/controllers/raids/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:raids/index\", \"RaidsIndexController\", {\n    // Specify the other units that are required for this test.\n    needs: [\"controller:application\"]\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('coretheloothound/tests/unit/controllers/raids/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers/raids');\n  test('unit/controllers/raids/index-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/raids/index-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/controllers/raids/new-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:raids/new\", \"RaidsNewController\", {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n    needs: [\"controller:application\"]\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('coretheloothound/tests/unit/controllers/raids/new-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers/raids');\n  test('unit/controllers/raids/new-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/raids/new-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/controllers/role-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:role\", \"RoleController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/controllers/role-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/role-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/role-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/controllers/signup-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:signup\", \"SignupController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/controllers/signup-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/signup-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/signup-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/helpers/character-class-test', ['coretheloothound/helpers/character-class'], function (character_class) {\n\n  'use strict';\n\n  module(\"CharacterClassHelper\");\n\n  // Replace this with your real tests.\n  test(\"it works\", function () {\n    var result = character_class.characterClass(42);\n    ok(result);\n  });\n\n});","define('coretheloothound/tests/unit/helpers/character-class-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/helpers');\n  test('unit/helpers/character-class-test.js should pass jshint', function() { \n    ok(true, 'unit/helpers/character-class-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/helpers/character-faction-test', ['coretheloothound/helpers/character-faction'], function (character_faction) {\n\n  'use strict';\n\n  module(\"CharacterFactionHelper\");\n\n  // Replace this with your real tests.\n  test(\"it works\", function () {\n    var result = character_faction.characterFaction(42);\n    ok(result);\n  });\n\n});","define('coretheloothound/tests/unit/helpers/character-faction-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/helpers');\n  test('unit/helpers/character-faction-test.js should pass jshint', function() { \n    ok(true, 'unit/helpers/character-faction-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/helpers/character-race-test', ['coretheloothound/helpers/character-race'], function (character_race) {\n\n  'use strict';\n\n  module(\"CharacterRaceHelper\");\n\n  // Replace this with your real tests.\n  test(\"it works\", function () {\n    var result = character_race.characterRace(42);\n    ok(result);\n  });\n\n});","define('coretheloothound/tests/unit/helpers/character-race-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/helpers');\n  test('unit/helpers/character-race-test.js should pass jshint', function() { \n    ok(true, 'unit/helpers/character-race-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/initializers/link-view-test', ['ember', 'coretheloothound/initializers/link-view'], function (Ember, link_view) {\n\n  'use strict';\n\n  var container, application;\n\n  module(\"LinkViewInitializer\", {\n    setup: function () {\n      Ember['default'].run(function () {\n        container = new Ember['default'].Container();\n        application = Ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test(\"it works\", function () {\n    link_view.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('coretheloothound/tests/unit/initializers/link-view-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/link-view-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/link-view-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/initializers/storage-test', ['ember', 'coretheloothound/initializers/storage'], function (Ember, storage) {\n\n  'use strict';\n\n  var container, application;\n\n  module(\"StorageInitializer\", {\n    setup: function () {\n      Ember['default'].run(function () {\n        container = new Ember['default'].Container();\n        application = Ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test(\"it works\", function () {\n    storage.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('coretheloothound/tests/unit/initializers/storage-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/storage-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/storage-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/mixins/after-render-test', ['ember', 'coretheloothound/mixins/after-render'], function (Ember, AfterRenderMixin) {\n\n  'use strict';\n\n  module(\"AfterRenderMixin\");\n\n  // Replace this with your real tests.\n  test(\"it works\", function () {\n    var AfterRenderObject = Ember['default'].Object.extend(AfterRenderMixin['default']);\n    var subject = AfterRenderObject.create();\n    ok(subject);\n  });\n\n});","define('coretheloothound/tests/unit/mixins/after-render-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/after-render-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/after-render-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/models/account-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"account\", \"Account\", {\n    // Specify the other units that are required for this test.\n    needs: [\"model:character\", \"model:guild\", \"model:permission\", \"model:raid\", \"model:role\", \"model:signup\"]\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('coretheloothound/tests/unit/models/account-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/account-test.js should pass jshint', function() { \n    ok(true, 'unit/models/account-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/models/character-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"character\", \"Character\", {\n    // Specify the other units that are required for this test.\n    needs: [\"model:account\", \"model:guild\", \"model:signup\", \"model:raid\", \"model:role\"]\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('coretheloothound/tests/unit/models/character-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/character-test.js should pass jshint', function() { \n    ok(true, 'unit/models/character-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/models/guild-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"guild\", \"Guild\", {\n    // Specify the other units that are required for this test.\n    needs: [\"model:account\", \"model:character\", \"model:signup\", \"model:raid\", \"model:role\"]\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('coretheloothound/tests/unit/models/guild-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/guild-test.js should pass jshint', function() { \n    ok(true, 'unit/models/guild-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/models/permission-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"permission\", \"Permission\", {\n    // Specify the other units that are required for this test.\n    needs: [\"model:permissioned\"]\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('coretheloothound/tests/unit/models/permission-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/permission-test.js should pass jshint', function() { \n    ok(true, 'unit/models/permission-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/models/permissioned-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"permissioned\", \"Permissioned\", {\n    // Specify the other units that are required for this test.\n    needs: [\"model:permission\"]\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('coretheloothound/tests/unit/models/permissioned-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/permissioned-test.js should pass jshint', function() { \n    ok(true, 'unit/models/permissioned-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/models/raid-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"raid\", \"Raid\", {\n    // Specify the other units that are required for this test.\n    needs: [\"model:account\", \"model:character\", \"model:guild\", \"model:permission\", \"model:permissioned\", \"model:role\", \"model:signup\"]\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('coretheloothound/tests/unit/models/raid-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/raid-test.js should pass jshint', function() { \n    ok(true, 'unit/models/raid-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/models/role-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"role\", \"Role\", {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('coretheloothound/tests/unit/models/role-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/role-test.js should pass jshint', function() { \n    ok(true, 'unit/models/role-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/models/signup-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"signup\", \"Signup\", {\n    // Specify the other units that are required for this test.\n    needs: [\"model:account\", \"model:character\", \"model:guild\", \"model:permission\", \"model:raid\", \"model:role\"]\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('coretheloothound/tests/unit/models/signup-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/signup-test.js should pass jshint', function() { \n    ok(true, 'unit/models/signup-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/routes/apikey-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:apikey\", \"ApikeyRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/routes/apikey-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/apikey-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/apikey-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/routes/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:application\", \"ApplicationRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/routes/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/application-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/application-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/routes/characters/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:characters/index\", \"CharactersIndexRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/routes/characters/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/characters');\n  test('unit/routes/characters/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/characters/index-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/routes/raid-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:raid\", \"RaidRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/routes/raid-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/raid-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/raid-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/routes/raid/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:raid/index\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/routes/raid/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/raid');\n  test('unit/routes/raid/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/raid/index-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/routes/raids/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:raids/index\", \"RaidsIndexRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('coretheloothound/tests/unit/routes/raids/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/raids');\n  test('unit/routes/raids/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/raids/index-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/serializers/signup-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"serializer:signup\", \"SignupSerializer\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var serializer = this.subject();\n    ok(serializer);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['serializer:foo']\n\n});","define('coretheloothound/tests/unit/serializers/signup-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/serializers');\n  test('unit/serializers/signup-test.js should pass jshint', function() { \n    ok(true, 'unit/serializers/signup-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/unit/views/raids/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"view:raids/index\", \"RaidsIndexView\");\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var view = this.subject();\n    ok(view);\n  });\n\n});","define('coretheloothound/tests/unit/views/raids/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/views/raids');\n  test('unit/views/raids/index-test.js should pass jshint', function() { \n    ok(true, 'unit/views/raids/index-test.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/tests/views/raids/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - views/raids');\n  test('views/raids/index.js should pass jshint', function() { \n    ok(true, 'views/raids/index.js should pass jshint.'); \n  });\n\n});","define('coretheloothound/transitions', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = function () {\n    this.transition(this.toRoute(\"index\"), this.use(\"crossFade\"), this.reverse(\"crossFade\"));\n\n    this.transition(this.fromRoute(\"raids\", \"raid\"), this.toRoute(\"account\"), this.use(\"toDown\"), this.reverse(\"toUp\"));\n\n    this.transition(this.fromRoute(\"raids\"), this.toRoute(\"raid\"), this.use(\"toLeft\"), this.reverse(\"toRight\"));\n\n    this.transition(this.fromRoute(\"raid.index\"), this.toRoute(\"raid.edit\"), this.use(\"toLeft\"), this.reverse(\"toRight\"));\n  };\n\n});","define('coretheloothound/transitions/cross-fade', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n  exports['default'] = crossFade;\n  // BEGIN-SNIPPET cross-fade-definition\n  function crossFade(oldView, insertNewView, opts) {\n    liquid_fire.stop(oldView);\n    return insertNewView().then(function (newView) {\n      return liquid_fire.Promise.all([liquid_fire.animate(oldView, { opacity: 0 }, opts), liquid_fire.animate(newView, { opacity: [1, 0] }, opts)]);\n    });\n  } // END-SNIPPET\n\n});","define('coretheloothound/transitions/fade', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n  exports['default'] = fade;\n  // BEGIN-SNIPPET fade-definition\n  function fade(oldView, insertNewView, opts) {\n    var firstStep,\n        outOpts = opts;\n\n    if (liquid_fire.isAnimating(oldView, \"fade-out\")) {\n      // if the old view is already fading out, let it finish.\n      firstStep = liquid_fire.finish(oldView, \"fade-out\");\n    } else {\n      if (liquid_fire.isAnimating(oldView, \"fade-in\")) {\n        // if the old view is partially faded in, scale its fade-out\n        // duration appropriately.\n        outOpts = { duration: liquid_fire.timeSpent(oldView, \"fade-in\") };\n      }\n      liquid_fire.stop(oldView);\n      firstStep = liquid_fire.animate(oldView, { opacity: 0 }, outOpts, \"fade-out\");\n    }\n\n    return firstStep.then(insertNewView).then(function (newView) {\n      return liquid_fire.animate(newView, { opacity: [1, 0] }, opts, \"fade-in\");\n    });\n  } // END-SNIPPET\n\n});","define('coretheloothound/transitions/flex-grow', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n  exports['default'] = flexGrow;\n  function flexGrow(oldView, insertNewView, opts) {\n    liquid_fire.stop(oldView);\n    return insertNewView().then(function (newView) {\n      return liquid_fire.Promise.all([liquid_fire.animate(oldView, { \"flex-grow\": 0 }, opts), liquid_fire.animate(newView, { \"flex-grow\": [1, 0] }, opts)]);\n    });\n  }\n\n});","define('coretheloothound/transitions/modal-popup', ['exports', 'ember', 'liquid-fire'], function (exports, Ember, liquid_fire) {\n\n  'use strict';\n\n\n\n  exports['default'] = modalPopup;\n  var Velocity = Ember['default'].$.Velocity;\n\n  function hideModal(oldView) {\n    var box, obscure;\n    if (!oldView || !(box = oldView.$(\".lm-container > div\")) || !(box = box[0]) || !(obscure = oldView.$(\".lf-overlay\")) || !(obscure = obscure[0])) {\n      return liquid_fire.Promise.resolve();\n    }\n\n    return liquid_fire.Promise.all([Velocity.animate(obscure, { opacity: [0, 0.5] }, { duration: 250 }), Velocity.animate(box, { scale: [0, 1] }, { duration: 250 })]);\n  }\n\n  function revealModal(insertNewView) {\n    return insertNewView().then(function (newView) {\n      var box, obscure;\n      if (!newView || !(box = newView.$(\".lm-container > div\")[0]) || !(obscure = newView.$(\".lf-overlay\")[0])) {\n        return;\n      }\n\n      // we're not going to animate the whole view, rather we're going\n      // to animate two pieces of it separately. So we move the view\n      // properties down onto the individual elements, so that the\n      // animate function can reveal them at precisely the right time.\n      Ember['default'].$(box).css({\n        display: \"none\"\n      });\n\n      Ember['default'].$(obscure).css({\n        display: \"none\"\n      });\n      newView.$().css({\n        display: \"\",\n        visibility: \"\"\n      });\n\n      return liquid_fire.Promise.all([Velocity.animate(obscure, { opacity: [0.5, 0] }, { duration: 250, display: \"\" }), Velocity.animate(box, { scale: [1, 0] }, { duration: 250, display: \"\" })]);\n    });\n  }function modalPopup(oldView, insertNewView) {\n    return hideModal(oldView).then(function () {\n      return revealModal(insertNewView);\n    });\n  }\n\n});","define('coretheloothound/transitions/move-over', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n\n  exports['default'] = moveOver;\n  function moveOver(oldView, insertNewView, dimension, direction, opts) {\n    var oldParams = {},\n        newParams = {},\n        firstStep,\n        property,\n        measure;\n\n    if (dimension.toLowerCase() === \"x\") {\n      property = \"translateX\";\n      measure = \"width\";\n    } else {\n      property = \"translateY\";\n      measure = \"height\";\n    }\n\n    if (liquid_fire.isAnimating(oldView, \"moving-in\")) {\n      firstStep = liquid_fire.finish(oldView, \"moving-in\");\n    } else {\n      liquid_fire.stop(oldView);\n      firstStep = liquid_fire.Promise.resolve();\n    }\n\n\n    return firstStep.then(insertNewView).then(function (newView) {\n      if (newView && newView.$() && oldView && oldView.$()) {\n        var sizes = [parseInt(newView.$().css(measure), 10), parseInt(oldView.$().css(measure), 10)];\n        var bigger = Math.max.apply(null, sizes);\n        oldParams[property] = bigger * direction + \"px\";\n        newParams[property] = [\"0px\", -1 * bigger * direction + \"px\"];\n      } else {\n        oldParams[property] = 100 * direction + \"%\";\n        newParams[property] = [\"0%\", -100 * direction + \"%\"];\n      }\n\n      return liquid_fire.Promise.all([liquid_fire.animate(oldView, oldParams, opts), liquid_fire.animate(newView, newParams, opts, \"moving-in\")]);\n    });\n  }\n\n});","define('coretheloothound/transitions/scroll-then', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = function () {\n    Ember['default'].assert(\"You must provide a transition name as the first argument to scrollThen. Example: this.use('scrollThen', 'toLeft')\", \"string\" === typeof arguments[2]);\n\n    var el = document.getElementsByTagName(\"html\"),\n        transitionArgs = Array.prototype.slice.call(arguments, 0, 2),\n        nextTransition = this.lookup(arguments[2]),\n        self = this,\n        options = arguments[3] || {};\n\n    Ember['default'].assert(\"The second argument to scrollThen is passed to Velocity's scroll function and must be an object\", \"object\" === typeof options);\n\n    // set scroll options via: this.use('scrollThen', 'ToLeft', {easing: 'spring'})\n    options = Ember['default'].merge({ duration: 500, offset: 0 }, options);\n\n    // additional args can be passed through after the scroll options object\n    // like so: this.use('scrollThen', 'moveOver', {duration: 100}, 'x', -1);\n    transitionArgs.push.apply(transitionArgs, Array.prototype.slice.call(arguments, 4));\n\n    return window.$.Velocity(el, \"scroll\", options).then(function () {\n      nextTransition.apply(self, transitionArgs);\n    });\n  };\n\n});","define('coretheloothound/transitions/to-down', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n\t'use strict';\n\n\texports['default'] = liquid_fire.curryTransition(\"move-over\", \"y\", 1);\n\n});","define('coretheloothound/transitions/to-left', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n\t'use strict';\n\n\texports['default'] = liquid_fire.curryTransition(\"move-over\", \"x\", -1);\n\n});","define('coretheloothound/transitions/to-right', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n\t'use strict';\n\n\texports['default'] = liquid_fire.curryTransition(\"move-over\", \"x\", 1);\n\n});","define('coretheloothound/transitions/to-up', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n\t'use strict';\n\n\texports['default'] = liquid_fire.curryTransition(\"move-over\", \"y\", -1);\n\n});","define('coretheloothound/views/liquid-child', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ContainerView.extend({\n    classNames: [\"liquid-child\"],\n    resolveInsertionPromise: Ember['default'].on(\"didInsertElement\", function () {\n      // Children start out hidden and invisible.\n      // Measurement will `show` them and Velocity will make them visible.\n      // This prevents a flash of pre-animated content.\n      this.$().css({ visibility: \"hidden\" }).hide();\n      if (this._resolveInsertion) {\n        this._resolveInsertion(this);\n      }\n    })\n  });\n\n});","define('coretheloothound/views/liquid-if', ['exports', 'coretheloothound/views/liquid-outlet', 'ember'], function (exports, LiquidOutlet, Ember) {\n\n  'use strict';\n\n  var isHTMLBars = !!Ember['default'].HTMLBars;\n\n  exports['default'] = LiquidOutlet['default'].extend({\n    liquidUpdate: Ember['default'].on(\"init\", Ember['default'].observer(\"showFirst\", function () {\n      var template = this.get(\"templates\")[this.get(\"showFirst\") ? 0 : 1];\n      if (!template || !isHTMLBars && template === Ember['default'].Handlebars.VM.noop) {\n        this.set(\"currentView\", null);\n        return;\n      }\n      var view = Ember['default']._MetamorphView.create({\n        container: this.container,\n        template: template,\n        liquidParent: this,\n        contextBinding: \"liquidParent.context\",\n        liquidContext: this.get(\"showFirst\"),\n        hasLiquidContext: true\n      });\n      this.set(\"currentView\", view);\n    }))\n\n  });\n\n});","define('coretheloothound/views/liquid-outlet', ['exports', 'ember', 'liquid-fire'], function (exports, Ember, liquid_fire) {\n\n  'use strict';\n\n  var capitalize = Ember['default'].String.capitalize;\n\n  exports['default'] = Ember['default'].ContainerView.extend({\n    classNames: [\"liquid-container\"],\n    growDuration: 250,\n    growPixelsPerSecond: 200,\n    growEasing: \"slide\",\n    enableGrowth: true,\n\n    init: function () {\n      // The ContainerView constructor normally sticks our \"currentView\"\n      // directly into _childViews, but we want to leave that up to\n      // _currentViewDidChange so we have the opportunity to launch a\n      // transition.\n      this._super();\n      Ember['default'].A(this._childViews).clear();\n\n      if (this.get(\"containerless\")) {\n        // This prevents Ember from throwing an assertion when we try to\n        // render as a virtual view.\n        this.set(\"innerClassNameBindings\", this.get(\"classNameBindings\"));\n        this.set(\"classNameBindings\", Ember['default'].A());\n      }\n    },\n\n    // Deliberately overriding a private method from\n    // Ember.ContainerView!\n    //\n    // We need to stop it from destroying our outgoing child view\n    // prematurely.\n    _currentViewWillChange: Ember['default'].beforeObserver(\"currentView\", function () {}),\n\n    // Deliberately overriding a private method from\n    // Ember.ContainerView!\n    _currentViewDidChange: Ember['default'].on(\"init\", Ember['default'].observer(\"currentView\", function () {\n      // Normally there is only one child (the view we're\n      // replacing). But sometimes there may be two children (because a\n      // transition is already in progress). In any case, we tell all of\n      // them to start heading for the exits now.\n\n      var oldView = this.get(\"childViews.lastObject\"),\n          newView = this.get(\"currentView\"),\n          firstTime;\n\n      // For the convenience of the transition rules, we explicitly\n      // track our first transition, which happens at initial render.\n      firstTime = !this._hasTransitioned;\n      this._hasTransitioned = true;\n\n      // Idempotence\n      if (!oldView && !newView || oldView && oldView.get(\"currentView\") === newView || this._runningTransition && this._runningTransition.oldView === oldView && this._runningTransition.newContent === newView) {\n        return;\n      }\n\n      // `transitions` comes from dependency injection, see the\n      // liquid-fire app initializer.\n      var transition = this.get(\"transitions\").transitionFor(this, oldView, newView, this.get(\"use\"), firstTime);\n\n      if (this._runningTransition) {\n        this._runningTransition.interrupt();\n      }\n\n      this._runningTransition = transition;\n      transition.run()[\"catch\"](function (err) {\n        // Force any errors through to the RSVP error handler, because\n        // of https://github.com/tildeio/rsvp.js/pull/278.  The fix got\n        // into Ember 1.7, so we can drop this once we decide 1.6 is\n        // EOL.\n        Ember['default'].RSVP.Promise.resolve()._onerror(err);\n      });\n    })),\n\n    _liquidChildFor: function (content) {\n      if (content && !content.get(\"hasLiquidContext\")) {\n        content.set(\"liquidContext\", content.get(\"context\"));\n      }\n      var LiquidChild = this.container.lookupFactory(\"view:liquid-child\");\n      var childProperties = {\n        currentView: content\n      };\n      if (this.get(\"containerless\")) {\n        childProperties.classNames = this.get(\"classNames\").without(\"liquid-container\");\n        childProperties.classNameBindings = this.get(\"innerClassNameBindings\");\n      }\n      return LiquidChild.create(childProperties);\n    },\n\n    _pushNewView: function (newView) {\n      if (!newView) {\n        return liquid_fire.Promise.resolve();\n      }\n      var child = this._liquidChildFor(newView),\n          promise = new liquid_fire.Promise(function (resolve) {\n        child._resolveInsertion = resolve;\n      });\n      this.pushObject(child);\n      return promise;\n    },\n\n    cacheSize: function () {\n      var elt = this.$();\n      if (elt) {\n        // Measure original size.\n        this._cachedSize = getSize(elt);\n      }\n    },\n\n    unlockSize: function () {\n      var self = this;\n      function doUnlock() {\n        var elt = self.$();\n        if (elt) {\n          elt.css({ width: \"\", height: \"\" });\n        }\n      }\n      if (this._scaling) {\n        this._scaling.then(doUnlock);\n      } else {\n        doUnlock();\n      }\n    },\n\n    _durationFor: function (before, after) {\n      return Math.min(this.get(\"growDuration\"), 1000 * Math.abs(before - after) / this.get(\"growPixelsPerSecond\"));\n    },\n\n    _adaptDimension: function (dimension, before, after) {\n      if (before[dimension] === after[dimension] || !this.get(\"enableGrowth\")) {\n        var elt = this.$();\n        if (elt) {\n          elt[dimension](after[dimension]);\n        }\n        return liquid_fire.Promise.resolve();\n      } else {\n        // Velocity deals in literal width/height, whereas jQuery deals\n        // in box-sizing-dependent measurements.\n        var target = {};\n        target[dimension] = [after[\"literal\" + capitalize(dimension)], before[\"literal\" + capitalize(dimension)]];\n        return liquid_fire.animate(this, target, {\n          duration: this._durationFor(before[dimension], after[dimension]),\n          queue: false,\n          easing: this.get(\"growEasing\")\n        });\n      }\n    },\n\n    adaptSize: function () {\n      liquid_fire.stop(this);\n\n      var elt = this.$();\n      if (!elt) {\n        return;\n      }\n\n      // Measure new size.\n      var newSize = getSize(elt);\n      if (typeof this._cachedSize === \"undefined\") {\n        this._cachedSize = newSize;\n      }\n\n      // Now that measurements have been taken, lock the size\n      // before the invoking the scaling transition.\n      elt.width(this._cachedSize.width);\n      elt.height(this._cachedSize.height);\n\n      this._scaling = liquid_fire.Promise.all([this._adaptDimension(\"width\", this._cachedSize, newSize), this._adaptDimension(\"height\", this._cachedSize, newSize)]);\n    }\n\n  });\n\n  // We're tracking both jQuery's box-sizing dependent measurements and\n  // the literal CSS properties, because it's nice to get/set dimensions\n  // with jQuery and not worry about boz-sizing *but* Velocity needs the\n  // raw values.\n  function getSize(elt) {\n    return {\n      width: elt.width(),\n      literalWidth: parseInt(elt.css(\"width\"), 10),\n      height: elt.height(),\n      literalHeight: parseInt(elt.css(\"height\"), 10)\n    };\n  }\n\n});","define('coretheloothound/views/liquid-with', ['exports', 'coretheloothound/views/liquid-outlet', 'ember'], function (exports, LiquidOutlet, Ember) {\n\n  'use strict';\n\n  exports['default'] = LiquidOutlet['default'].extend({\n    liquidUpdate: Ember['default'].on(\"init\", Ember['default'].observer(\"boundContext\", function () {\n      var context = this.get(\"boundContext\");\n      if (Ember['default'].isEmpty(context)) {\n        this.set(\"currentView\", null);\n        return;\n      }\n      var view = Ember['default']._MetamorphView.create({\n        container: this.container,\n        templateName: \"liquid-with\",\n        boundContext: context,\n        liquidWithParent: this,\n        liquidContext: context,\n        hasLiquidContext: true });\n      this.set(\"currentView\", view);\n    }))\n\n  });\n\n});","define('coretheloothound/views/raids/index', ['exports', 'ember', 'coretheloothound/mixins/after-render'], function (exports, Ember, AfterRender) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].View.extend(AfterRender['default'], {\n    afterRenderEvent: function () {\n      Ember['default'].$(\"[data-toggle=\\\"popover\\\"]\").popover({\n        title: \"Raid Note\",\n        placement: \"top\",\n        trigger: \"hover\"\n      });\n    }\n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('coretheloothound/config/environment', ['ember'], function(Ember) {\n  var prefix = 'coretheloothound';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"coretheloothound/tests/test-helper\");\n} else {\n  require(\"coretheloothound/app\")[\"default\"].create({\"LOG_TRANSITIONS\":true,\"LOG_TRANSITIONS_INTERNAL\":true,\"LOG_VIEW_LOOKUPS\":true,\"name\":\"coretheloothound\",\"version\":\"0.0.0.a1e9f493\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACztGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvlhjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtrndnaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrryBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACr4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACztBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"coretheloothound.js"}